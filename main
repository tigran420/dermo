from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç BotFather
TOKEN = "8406823713:AAHlcszbNdT2-DrxFMa4EC5CCBAAcY-FIFM"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ —É–∂–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç.
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞.
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –º–µ–±–µ–ª–∏:
"""


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–±–µ–ª–∏
def get_categories_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ö–Ω—è", callback_data="–∫—É—Ö–Ω—è")],
        [InlineKeyboardButton("–®–∫–∞—Ñ", callback_data="—à–∫–∞—Ñ")],
        [InlineKeyboardButton("–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", callback_data="–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è")],
        [InlineKeyboardButton("–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å", callback_data="–¥—Ä—É–≥–æ–µ")],
    ]
    return InlineKeyboardMarkup(keyboard)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
def get_actions_keyboard():
    keyboard = [
        [KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª–æ–∫–∞ —Å–≤—è–∑–∏ –≤ –∫–æ–Ω—Ü–µ
def get_contact_final_keyboard():
    keyboard = [
        [KeyboardButton("üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"), KeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")],
        [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏...")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_keyboard():
    keyboard = [
        [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_kitchen_type_keyboard():
    keyboard = [
        [InlineKeyboardButton("–£–≥–ª–æ–≤–∞—è", callback_data="–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è")],
        [InlineKeyboardButton("–ü—Ä—è–º–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è")],
        [InlineKeyboardButton("–ü-–æ–±—Ä–∞–∑–Ω–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è")],
        [InlineKeyboardButton("–° –æ—Å—Ç—Ä–æ–≤–æ–º", callback_data="–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_size_keyboard():
    keyboard = [
        [InlineKeyboardButton("–¢–æ—á–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ")],
        [InlineKeyboardButton("–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ")],
        [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ç–∏–ø")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_material_keyboard():
    keyboard = [
        [InlineKeyboardButton("–õ–î–°–ü", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø")],
        [InlineKeyboardButton("–ê–ì–¢", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç")],
        [InlineKeyboardButton("–≠–º–∞–ª—å", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_hardware_keyboard():
    keyboard = [
        [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º")],
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
        [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_budget_keyboard():
    keyboard = [
        [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º", callback_data="–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º")],
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
        [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–ø—Ä–µ–¥—ã–¥—É—â–∏–π")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_deadline_keyboard():
    keyboard = [
        [InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="—Å—Ä–æ–∫_–º–µ—Å—è—Ü")],
        [InlineKeyboardButton("1-2 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_1_2")],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_3")],
        [InlineKeyboardButton("–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", callback_data="—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_cabinet_type_keyboard():
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å–ø–∞—à–Ω–æ–π", callback_data="—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π")],
        [InlineKeyboardButton("–ö—É–ø–µ", callback_data="—à–∫–∞—Ñ_–∫—É–ø–µ")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=get_categories_keyboard())


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if query.data.startswith("–Ω–∞–∑–∞–¥_"):
        await handle_back_button(query, user_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if query.data == "–∫—É—Ö–Ω—è":
        user_data[user_id]['category'] = '–∫—É—Ö–Ω—è'
        user_data[user_id]['current_step'] = 'kitchen_type'
        await query.edit_message_text(
            "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
            reply_markup=get_kitchen_type_keyboard()
        )

    elif query.data == "—à–∫–∞—Ñ":
        user_data[user_id]['category'] = '—à–∫–∞—Ñ'
        user_data[user_id]['current_step'] = 'cabinet_type'
        await query.edit_message_text(
            "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
            reply_markup=get_cabinet_type_keyboard()
        )

    elif query.data == "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
        user_data[user_id]['category'] = '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è'
        user_data[user_id]['current_step'] = 'size'
        await query.edit_message_text(
            "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
            reply_markup=get_size_keyboard()
        )

    elif query.data == "–¥—Ä—É–≥–æ–µ":
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üõã **–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å**\n\n–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∞—è –º–µ–±–µ–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_actions_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ö–£–•–ù–Ø
    elif query.data.startswith("–∫—É—Ö–Ω—è_"):
        if query.data == "–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è":
            user_data[user_id]['kitchen_type'] = '–£–≥–ª–æ–≤–∞—è'
        elif query.data == "–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è":
            user_data[user_id]['kitchen_type'] = '–ü—Ä—è–º–∞—è'
        elif query.data == "–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è":
            user_data[user_id]['kitchen_type'] = '–ü-–æ–±—Ä–∞–∑–Ω–∞—è'
        elif query.data == "–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤":
            user_data[user_id]['kitchen_type'] = '–° –æ—Å—Ç—Ä–æ–≤–æ–º'

        user_data[user_id]['current_step'] = 'size'
        await query.edit_message_text(
            "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
            reply_markup=get_size_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (–æ–±—â–µ–µ –¥–ª—è –ö—É—Ö–Ω–∏ –∏ –ì–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π)
    elif query.data.startswith("—Ä–∞–∑–º–µ—Ä_"):
        if query.data == "—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ":
            user_data[user_id]['size'] = '–¢–æ—á–Ω—ã–µ'
        elif query.data == "—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ":
            user_data[user_id]['size'] = '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ'
        elif query.data == "—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é":
            user_data[user_id]['size'] = '–ù–µ –∑–Ω–∞—é'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = user_data[user_id].get('category', '')
        
        if category == '–∫—É—Ö–Ω—è':
            user_data[user_id]['current_step'] = 'material'
            await query.edit_message_text(
                "üé® **–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
                reply_markup=get_material_keyboard()
            )
        elif category == '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è':
            user_data[user_id]['current_step'] = 'budget'
            await query.edit_message_text(
                "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                reply_markup=get_budget_keyboard()
            )

    elif query.data.startswith("–º–∞—Ç–µ—Ä–∏–∞–ª_"):
        if query.data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø":
            user_data[user_id]['material'] = '–õ–î–°–ü'
        elif query.data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç":
            user_data[user_id]['material'] = '–ê–ì–¢'
        elif query.data == "–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å":
            user_data[user_id]['material'] = '–≠–º–∞–ª—å'

        user_data[user_id]['current_step'] = 'hardware'
        await query.edit_message_text(
            "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
            reply_markup=get_hardware_keyboard()
        )

    elif query.data.startswith("—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_"):
        if query.data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º":
            user_data[user_id]['hardware'] = '–≠–∫–æ–Ω–æ–º'
        elif query.data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
            user_data[user_id]['hardware'] = '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
        elif query.data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º":
            user_data[user_id]['hardware'] = '–ü—Ä–µ–º–∏—É–º'

        user_data[user_id]['current_step'] = 'budget'
        await query.edit_message_text(
            "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
            reply_markup=get_budget_keyboard()
        )

    elif query.data.startswith("–±—é–¥–∂–µ—Ç_"):
        if query.data == "–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º":
            user_data[user_id]['budget'] = '–≠–∫–æ–Ω–æ–º'
        elif query.data == "–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
            user_data[user_id]['budget'] = '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
        elif query.data == "–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º":
            user_data[user_id]['budget'] = '–ü—Ä–µ–º–∏—É–º'

        user_data[user_id]['current_step'] = 'deadline'
        await query.edit_message_text(
            "üìÖ **–°—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:",
            reply_markup=get_deadline_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –®–ö–ê–§
    elif query.data.startswith("—à–∫–∞—Ñ_"):
        if query.data == "—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π":
            user_data[user_id]['cabinet_type'] = '–†–∞—Å–ø–∞—à–Ω–æ–π'
        elif query.data == "—à–∫–∞—Ñ_–∫—É–ø–µ":
            user_data[user_id]['cabinet_type'] = '–ö—É–ø–µ'

        user_data[user_id]['current_step'] = 'budget'
        await query.edit_message_text(
            "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
            reply_markup=get_budget_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    elif query.data.startswith("—Å—Ä–æ–∫_"):
        if query.data == "—Å—Ä–æ–∫_–º–µ—Å—è—Ü":
            user_data[user_id]['deadline'] = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
        elif query.data == "—Å—Ä–æ–∫_1_2":
            user_data[user_id]['deadline'] = '1-2 –º–µ—Å—è—Ü–∞'
        elif query.data == "—Å—Ä–æ–∫_3":
            user_data[user_id]['deadline'] = '3 –º–µ—Å—è—Ü–∞'
        elif query.data == "—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä":
            user_data[user_id]['deadline'] = '–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å'

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await query.edit_message_text(
            "üë§ **–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        )
        user_data[user_id]['waiting_for'] = 'name'
        user_data[user_id]['current_step'] = 'name'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def handle_back_button(query, user_id):
    back_step = query.data.replace("–Ω–∞–∑–∞–¥_", "")
    
    if back_step == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await query.edit_message_text(
            WELCOME_MESSAGE,
            reply_markup=get_categories_keyboard()
        )
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_id in user_data:
            del user_data[user_id]
    
    elif back_step == "—Ç–∏–ø":
        category = user_data[user_id].get('category', '')
        if category == '–∫—É—Ö–Ω—è':
            await query.edit_message_text(
                "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                reply_markup=get_kitchen_type_keyboard()
            )
        elif category == '—à–∫–∞—Ñ':
            await query.edit_message_text(
                "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                reply_markup=get_cabinet_type_keyboard()
            )
    
    elif back_step == "—Ä–∞–∑–º–µ—Ä":
        await query.edit_message_text(
            "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
            reply_markup=get_size_keyboard()
        )
    
    elif back_step == "–º–∞—Ç–µ—Ä–∏–∞–ª":
        await query.edit_message_text(
            "üé® **–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
            reply_markup=get_material_keyboard()
        )
    
    elif back_step == "–ø—Ä–µ–¥—ã–¥—É—â–∏–π":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = user_data[user_id].get('category', '')
        if category == '–∫—É—Ö–Ω—è':
            await query.edit_message_text(
                "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                reply_markup=get_hardware_keyboard()
            )
        elif category in ['—à–∫–∞—Ñ', '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è']:
            if category == '—à–∫–∞—Ñ':
                await query.edit_message_text(
                    "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                    reply_markup=get_cabinet_type_keyboard()
                )
            else:
                await query.edit_message_text(
                    "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                    reply_markup=get_size_keyboard()
                )
    
    elif back_step == "–±—é–¥–∂–µ—Ç":
        await query.edit_message_text(
            "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
            reply_markup=get_budget_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in user_data:
        user_data[user_id] = {}

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–º—è
    if user_data[user_id].get('waiting_for') == 'name':
        user_data[user_id]['name'] = text
        user_data[user_id]['waiting_for'] = 'phone'
        
        await update.message.reply_text(
            f"üë§ **–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ:** {text}\n\n"
            "üì± **–¢–µ–ª–µ—Ñ–æ–Ω**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_keyboard()
        )

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Ä—É—á–Ω—É—é
    elif user_data[user_id].get('waiting_for') == 'phone':
        if text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            await update.message.reply_text(
                "üì± **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é:**\n\n"
                "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
        elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            user_data[user_id]['waiting_for'] = 'name'
            await update.message.reply_text(
                "üë§ **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:**",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if validate_phone(text):
                user_data[user_id]['phone'] = text
                await send_final_summary(update, context, user_id)
            else:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'",
                    reply_markup=get_phone_keyboard()
                )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in user_data and user_data[user_id].get('waiting_for') == 'phone':
        phone_number = update.message.contact.phone_number
        user_data[user_id]['phone'] = phone_number
        await send_final_summary(update, context, user_id)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def validate_phone(phone):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    if phone.startswith('+7') and len(phone) == 12:
        return True
    elif phone.startswith('8') and len(phone) == 11:
        return True
    elif phone.startswith('7') and len(phone) == 11:
        return True
    return False


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
async def send_final_summary(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    category = user_data[user_id].get('category', '')
    summary = "‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!**\n\n"
    summary += f"üë§ **–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
    summary += f"‚Ä¢ –ò–º—è: {user_data[user_id].get('name', '')}\n"
    summary += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id].get('phone', '')}\n\n"

    if category == '–∫—É—Ö–Ω—è':
        summary += f"üè† **–ö—É—Ö–Ω—è**\n"
        summary += f"‚Ä¢ –¢–∏–ø: {user_data[user_id].get('kitchen_type', '')}\n"
        summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data[user_id].get('size', '')}\n"
        summary += f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {user_data[user_id].get('material', '')}\n"
        summary += f"‚Ä¢ –§—É—Ä–Ω–∏—Ç—É—Ä–∞: {user_data[user_id].get('hardware', '')}\n"
        summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {user_data[user_id].get('budget', '')}\n"
        summary += f"‚Ä¢ –°—Ä–æ–∫–∏: {user_data[user_id].get('deadline', '')}\n"

    elif category == '—à–∫–∞—Ñ':
        summary += f"üö™ **–®–∫–∞—Ñ**\n"
        summary += f"‚Ä¢ –¢–∏–ø: {user_data[user_id].get('cabinet_type', '')}\n"
        summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {user_data[user_id].get('budget', '')}\n"
        summary += f"‚Ä¢ –°—Ä–æ–∫–∏: {user_data[user_id].get('deadline', '')}\n"

    elif category == '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è':
        summary += f"üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n"
        summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data[user_id].get('size', '')}\n"
        summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {user_data[user_id].get('budget', '')}\n"
        summary += f"‚Ä¢ –°—Ä–æ–∫–∏: {user_data[user_id].get('deadline', '')}\n"

    summary += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=summary
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–≤—è–∑–∏
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üìû **–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
        reply_markup=get_contact_final_keyboard()
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if user_id in user_data:
        del user_data[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
async def handle_reply_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await update.message.reply_text(
            "üìû **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
            "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\n"
            "üì± WhatsApp: +79063405556",
            reply_markup=get_actions_keyboard()
        )
    elif text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì":
        await update.message.reply_text(
            "üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram**\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram: @max_lap555\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +79063405556",
            reply_markup=get_actions_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å–≤—è–∑–∏
    elif text == "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await update.message.reply_text(
            "üìû **–°–≤—è–∑—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
            "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É:\n"
            "üì± +79063405556\n\n"
            "–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ –ü–Ω-–ü—Ç: 9:00-18:00\n"
            "‚Ä¢ –°–±: 10:00-16:00",
            reply_markup=get_contact_final_keyboard()
        )
    elif text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram":
        await update.message.reply_text(
            "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram:\n"
            "üë§ @max_lap555\n\n"
            "–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            "https://t.me/max_lap555",
            reply_markup=get_contact_final_keyboard()
        )
    elif text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        user_id = update.effective_user.id
        if user_id in user_data:
            del user_data[user_id]
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=get_categories_keyboard()
        )


def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply_buttons))

    application.run_polling()


if __name__ == '__main__':
    main()
