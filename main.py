import asyncio
import json
import logging
import threading
import time
from enum import Enum
from typing import Dict, Any

# VK imports
import vk_api
# Telegram imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Platform(Enum):
    TELEGRAM = "telegram"
    VK = "vk"


# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
TELEGRAM_TOKEN = "8295931339:AAEP07XBDZ7FBIGSZg7SOZ8g7Sc_hsml8h0"
VK_TOKEN = "vk1.a.Do3IzROgiVPPGSjBVw3nFEg2eIAsy7673mBTpwakOxj_qNTtCxEXx8Pa9NS_q7FbDZqVlfecQgofYCYotRguILuXWAYu7DL2gkQocsu7zcRvk3M9R_0jCzzjErAJRLcy_Zx4jEZR87zCFUJvKIvkU_hLmJbfozuPkamZbBaElI1yZ8U3RpRNqMdjkdwm5SdFFS1HqCp7xxLu0EnF4JyVqA"
VK_GROUP_ID = "233089872"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ —É–∂–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç.
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞.
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –º–µ–±–µ–ª–∏:
"""

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
class KeyboardManager:
    @staticmethod
    def get_categories_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–ö—É—Ö–Ω—è", callback_data="–∫—É—Ö–Ω—è")],
                [InlineKeyboardButton("–®–∫–∞—Ñ", callback_data="—à–∫–∞—Ñ")],
                [InlineKeyboardButton("–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", callback_data="–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è")],
                [InlineKeyboardButton("–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å", callback_data="–¥—Ä—É–≥–æ–µ")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üç≥ –ö—É—Ö–Ω—è",
                            "payload": "{\"command\": \"–∫—É—Ö–Ω—è\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üö™ –®–∫–∞—Ñ",
                            "payload": "{\"command\": \"—à–∫–∞—Ñ\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üëî –ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è",
                            "payload": "{\"command\": \"–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üõã –î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å",
                            "payload": "{\"command\": \"–¥—Ä—É–≥–æ–µ\"}"
                        },
                        "color": "secondary"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_actions_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì")]
            ]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                            "payload": "{\"command\": \"–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\"}"
                        },
                        "color": "positive"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ì",
                            "payload": "{\"command\": \"–Ω–∞–ø–∏—Å–∞—Ç—å_—Ç–≥\"}"
                        },
                        "color": "primary"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_contact_final_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [KeyboardButton("üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"), KeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")],
                [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
            ]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                                       input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏...")
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                            "payload": "{\"command\": \"–ø–æ_—Ç–µ–ª–µ—Ñ–æ–Ω—É\"}"
                        },
                        "color": "positive"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram",
                            "payload": "{\"command\": \"—Å–æ–æ–±—â–µ–Ω–∏–µ_—Ç–≥\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                            "payload": "{\"command\": \"–Ω–∞—á–∞—Ç—å_–∑–∞–Ω–æ–≤–æ\"}"
                        },
                        "color": "secondary"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_phone_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
            ]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìû –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
                            "payload": "{\"command\": \"–≤–≤–µ—Å—Ç–∏_—Ç–µ–ª–µ—Ñ–æ–Ω\"}"
                        },
                        "color": "positive"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_kitchen_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–£–≥–ª–æ–≤–∞—è", callback_data="–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è")],
                [InlineKeyboardButton("–ü—Ä—è–º–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è")],
                [InlineKeyboardButton("–ü-–æ–±—Ä–∞–∑–Ω–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è")],
                [InlineKeyboardButton("–° –æ—Å—Ç—Ä–æ–≤–æ–º", callback_data="–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìê –£–≥–ª–æ–≤–∞—è",
                            "payload": "{\"command\": \"–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìè –ü—Ä—è–º–∞—è",
                            "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîÑ –ü-–æ–±—Ä–∞–∑–Ω–∞—è",
                            "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üèù –° –æ—Å—Ç—Ä–æ–≤–æ–º",
                            "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_size_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–¢–æ—á–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ")],
                [InlineKeyboardButton("–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ")],
                [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ç–∏–ø")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìè –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã",
                            "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ\"}"
                        },
                        "color": "positive"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìê –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ",
                            "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "‚ùì –ù–µ –∑–Ω–∞—é",
                            "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é\"}"
                        },
                        "color": "secondary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_—Ç–∏–ø\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_material_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–õ–î–°–ü", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø")],
                [InlineKeyboardButton("–ê–ì–¢", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç")],
                [InlineKeyboardButton("–≠–º–∞–ª—å", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üå≥ –õ–î–°–ü",
                            "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "‚ú® –ê–ì–¢",
                            "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üé® –≠–º–∞–ª—å",
                            "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_hardware_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üí∞ –≠–∫–æ–Ω–æ–º",
                            "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç",
                            "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üëë –ü—Ä–µ–º–∏—É–º",
                            "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_budget_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º", callback_data="–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–ø—Ä–µ–¥—ã–¥—É—â–∏–π")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üí∞ –≠–∫–æ–Ω–æ–º",
                            "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç",
                            "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üëë –ü—Ä–µ–º–∏—É–º",
                            "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–ø—Ä–µ–¥—ã–¥—É—â–∏–π\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_deadline_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="—Å—Ä–æ–∫_–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("1-2 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_1_2")],
                [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_3")],
                [InlineKeyboardButton("–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", callback_data="—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü",
                            "payload": "{\"command\": \"—Å—Ä–æ–∫_–º–µ—Å—è—Ü\"}"
                        },
                        "color": "positive"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üìÜ 1-2 –º–µ—Å—è—Ü–∞",
                            "payload": "{\"command\": \"—Å—Ä–æ–∫_1_2\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üóì 3 –º–µ—Å—è—Ü–∞",
                            "payload": "{\"command\": \"—Å—Ä–æ–∫_3\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üëÄ –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å",
                            "payload": "{\"command\": \"—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä\"}"
                        },
                        "color": "secondary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_cabinet_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–†–∞—Å–ø–∞—à–Ω–æ–π", callback_data="—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π")],
                [InlineKeyboardButton("–ö—É–ø–µ", callback_data="—à–∫–∞—Ñ_–∫—É–ø–µ")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üö™ –†–∞—Å–ø–∞—à–Ω–æ–π",
                            "payload": "{\"command\": \"—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üö∂ –ö—É–ø–µ",
                            "payload": "{\"command\": \"—à–∫–∞—Ñ_–∫—É–ø–µ\"}"
                        },
                        "color": "primary"
                    }],
                    [{
                        "action": {
                            "type": "callback",
                            "label": "üîô –ù–∞–∑–∞–¥",
                            "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"
                        },
                        "color": "negative"
                    }]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)


# –Ø–¥—Ä–æ –±–æ—Ç–∞ —Å –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π
class FurnitureBotCore:
    def __init__(self):
        self.adapters = {}

    def register_adapter(self, platform: Platform, adapter):
        self.adapters[platform] = adapter

    async def send_message(self, platform: Platform, user_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].send_message(user_id, text, keyboard)

    async def edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].edit_message(user_id, message_id, text, keyboard)

    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if user_id not in user_data:
            user_data[user_id] = {}
        return user_data[user_id]

    def clear_user_data(self, user_id: int):
        if user_id in user_data:
            del user_data[user_id]

    async def handle_start(self, platform: Platform, user_id: int):
        self.clear_user_data(user_id)
        await self.send_message(
            platform, user_id, WELCOME_MESSAGE,
            KeyboardManager.get_categories_keyboard(platform)
        )

    async def request_name(self, platform: Platform, user_id: int, message_id: int = None):
        text = "üë§ **–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        if message_id:
            await self.edit_message(platform, user_id, message_id, text)
        else:
            await self.send_message(platform, user_id, text)
        self.get_user_data(user_id)['waiting_for'] = 'name'

    async def handle_callback(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        user_data = self.get_user_data(user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if data.startswith("–Ω–∞–∑–∞–¥_"):
            await self.handle_back_button(platform, user_id, data, message_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data == "–∫—É—Ö–Ω—è":
            user_data['category'] = '–∫—É—Ö–Ω—è'
            user_data['current_step'] = 'kitchen_type'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                KeyboardManager.get_kitchen_type_keyboard(platform)
            )

        elif data == "—à–∫–∞—Ñ":
            user_data['category'] = '—à–∫–∞—Ñ'
            user_data['current_step'] = 'cabinet_type'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                KeyboardManager.get_cabinet_type_keyboard(platform)
            )

        elif data == "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
            user_data['category'] = '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è'
            user_data['current_step'] = 'size'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform)
            )

        elif data == "–¥—Ä—É–≥–æ–µ":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üõã **–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å**\n\n–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∞—è –º–µ–±–µ–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                KeyboardManager.get_actions_keyboard(platform)
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ö–£–•–ù–Ø
        elif data.startswith("–∫—É—Ö–Ω—è_"):
            if data == "–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è":
                user_data['kitchen_type'] = '–£–≥–ª–æ–≤–∞—è'
            elif data == "–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è":
                user_data['kitchen_type'] = '–ü—Ä—è–º–∞—è'
            elif data == "–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è":
                user_data['kitchen_type'] = '–ü-–æ–±—Ä–∞–∑–Ω–∞—è'
            elif data == "–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤":
                user_data['kitchen_type'] = '–° –æ—Å—Ç—Ä–æ–≤–æ–º'

            user_data['current_step'] = 'size'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform)
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (–æ–±—â–µ–µ –¥–ª—è –ö—É—Ö–Ω–∏ –∏ –ì–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π)
        elif data.startswith("—Ä–∞–∑–º–µ—Ä_"):
            if data == "—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ":
                user_data['size'] = '–¢–æ—á–Ω—ã–µ'
            elif data == "—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ":
                user_data['size'] = '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ'
            elif data == "—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é":
                user_data['size'] = '–ù–µ –∑–Ω–∞—é'

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = user_data.get('category', '')

            if category == '–∫—É—Ö–Ω—è':
                user_data['current_step'] = 'material'
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üé® **–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
                    KeyboardManager.get_material_keyboard(platform)
                )
            elif category == '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è':
                user_data['current_step'] = 'budget'
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                    KeyboardManager.get_budget_keyboard(platform)
                )

        elif data.startswith("–º–∞—Ç–µ—Ä–∏–∞–ª_"):
            if data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø":
                user_data['material'] = '–õ–î–°–ü'
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç":
                user_data['material'] = '–ê–ì–¢'
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å":
                user_data['material'] = '–≠–º–∞–ª—å'

            user_data['current_step'] = 'hardware'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                KeyboardManager.get_hardware_keyboard(platform)
            )

        elif data.startswith("—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_"):
            if data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º":
                user_data['hardware'] = '–≠–∫–æ–Ω–æ–º'
            elif data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
                user_data['hardware'] = '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
            elif data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º":
                user_data['hardware'] = '–ü—Ä–µ–º–∏—É–º'

            user_data['current_step'] = 'budget'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                KeyboardManager.get_budget_keyboard(platform)
            )

        elif data.startswith("–±—é–¥–∂–µ—Ç_"):
            if data == "–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º":
                user_data['budget'] = '–≠–∫–æ–Ω–æ–º'
            elif data == "–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
                user_data['budget'] = '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
            elif data == "–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º":
                user_data['budget'] = '–ü—Ä–µ–º–∏—É–º'

            user_data['current_step'] = 'deadline'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìÖ **–°—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:",
                KeyboardManager.get_deadline_keyboard(platform)
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –®–ö–ê–§
        elif data.startswith("—à–∫–∞—Ñ_"):
            if data == "—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π":
                user_data['cabinet_type'] = '–†–∞—Å–ø–∞—à–Ω–æ–π'
            elif data == "—à–∫–∞—Ñ_–∫—É–ø–µ":
                user_data['cabinet_type'] = '–ö—É–ø–µ'

            user_data['current_step'] = 'budget'
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                KeyboardManager.get_budget_keyboard(platform)
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        elif data.startswith("—Å—Ä–æ–∫_"):
            if data == "—Å—Ä–æ–∫_–º–µ—Å—è—Ü":
                user_data['deadline'] = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
            elif data == "—Å—Ä–æ–∫_1_2":
                user_data['deadline'] = '1-2 –º–µ—Å—è—Ü–∞'
            elif data == "—Å—Ä–æ–∫_3":
                user_data['deadline'] = '3 –º–µ—Å—è—Ü–∞'
            elif data == "—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä":
                user_data['deadline'] = '–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å'

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            await self.request_name(platform, user_id, message_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è VK
        elif data == "–≤–≤–µ—Å—Ç–∏_—Ç–µ–ª–µ—Ñ–æ–Ω":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üì± **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:**\n\n–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
            )
            user_data['waiting_for'] = 'phone'

        elif data == "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìû **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
                "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\n"
                "üì± WhatsApp: +79063405556",
                KeyboardManager.get_actions_keyboard(platform)
            )

        elif data == "–Ω–∞–ø–∏—Å–∞—Ç—å_—Ç–≥":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram**\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram: @max_lap555\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +79063405556",
                KeyboardManager.get_actions_keyboard(platform)
            )

        elif data == "–ø–æ_—Ç–µ–ª–µ—Ñ–æ–Ω—É":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìû **–°–≤—è–∑—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n"
                "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É:\n"
                "üì± +79063405556\n\n"
                "–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                "‚Ä¢ –ü–Ω-–ü—Ç: 9:00-18:00\n"
                "‚Ä¢ –°–±: 10:00-16:00",
                KeyboardManager.get_contact_final_keyboard(platform)
            )

        elif data == "—Å–æ–æ–±—â–µ–Ω–∏–µ_—Ç–≥":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram:\n"
                "üë§ @max_lap555\n\n"
                "–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "https://t.me/max_lap555",
                KeyboardManager.get_contact_final_keyboard(platform)
            )

        elif data == "–Ω–∞—á–∞—Ç—å_–∑–∞–Ω–æ–≤–æ":
            self.clear_user_data(user_id)
            await self.handle_start(platform, user_id)

    async def send_or_edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if message_id:
            await self.edit_message(platform, user_id, message_id, text, keyboard)
        else:
            await self.send_message(platform, user_id, text, keyboard)

    async def handle_back_button(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        back_step = data.replace("–Ω–∞–∑–∞–¥_", "")

        if back_step == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            self.clear_user_data(user_id)
            await self.send_or_edit_message(
                platform, user_id, message_id,
                WELCOME_MESSAGE,
                KeyboardManager.get_categories_keyboard(platform)
            )

        elif back_step == "—Ç–∏–ø":
            category = self.get_user_data(user_id).get('category', '')
            if category == '–∫—É—Ö–Ω—è':
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                    KeyboardManager.get_kitchen_type_keyboard(platform)
                )
            elif category == '—à–∫–∞—Ñ':
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                    KeyboardManager.get_cabinet_type_keyboard(platform)
                )

        elif back_step == "—Ä–∞–∑–º–µ—Ä":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform)
            )

        elif back_step == "–º–∞—Ç–µ—Ä–∏–∞–ª":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üé® **–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
                KeyboardManager.get_material_keyboard(platform)
            )

        elif back_step == "–ø—Ä–µ–¥—ã–¥—É—â–∏–π":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = self.get_user_data(user_id).get('category', '')
            if category == '–∫—É—Ö–Ω—è':
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                    KeyboardManager.get_hardware_keyboard(platform)
                )
            elif category in ['—à–∫–∞—Ñ', '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è']:
                if category == '—à–∫–∞—Ñ':
                    await self.send_or_edit_message(
                        platform, user_id, message_id,
                        "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                        KeyboardManager.get_cabinet_type_keyboard(platform)
                    )
                else:
                    await self.send_or_edit_message(
                        platform, user_id, message_id,
                        "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                        KeyboardManager.get_size_keyboard(platform)
                    )

        elif back_step == "–±—é–¥–∂–µ—Ç":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                KeyboardManager.get_budget_keyboard(platform)
            )

    async def handle_text_message(self, platform: Platform, user_id: int, text: str):
        user_data = self.get_user_data(user_id)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        normalized_text = text.lower().strip()

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        start_commands = ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', 'go', '–º–µ–Ω—é']

        if normalized_text in start_commands:
            await self.handle_start(platform, user_id)
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–º—è
        if user_data.get('waiting_for') == 'name':
            user_data['name'] = text
            user_data['waiting_for'] = 'phone'

            await self.send_message(
                platform, user_id,
                f"üë§ **–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ:** {text}\n\n"
                "üì± **–¢–µ–ª–µ—Ñ–æ–Ω**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                KeyboardManager.get_phone_keyboard(platform)
            )

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Ä—É—á–Ω—É—é
        elif user_data.get('waiting_for') == 'phone':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –≤ Telegram
            if text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                # –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                if platform == Platform.TELEGRAM:
                    from telegram import ReplyKeyboardRemove
                    await self.send_message(
                        platform, user_id,
                        "üì± **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é:**\n\n"
                        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
                        ReplyKeyboardRemove()
                    )
                else:
                    await self.send_message(
                        platform, user_id,
                        "üì± **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é:**\n\n"
                        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
                    )
                return

            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = text.strip()
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
            cleaned_phone = ''.join(c for c in phone if c.isdigit() or c == '+')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
            is_valid = False
            if cleaned_phone.startswith('+7') and len(cleaned_phone) == 12:
                is_valid = True
            elif cleaned_phone.startswith('8') and len(cleaned_phone) == 11:
                is_valid = True
                cleaned_phone = '+7' + cleaned_phone[1:]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif cleaned_phone.startswith('7') and len(cleaned_phone) == 11:
                is_valid = True
                cleaned_phone = '+7' + cleaned_phone[1:]

            if is_valid:
                user_data['phone'] = cleaned_phone
                user_data['waiting_for'] = None

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
                await self.send_final_summary(platform, user_id)

            else:
                await self.send_message(
                    platform, user_id,
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "+79123456789\n"
                    "89123456789\n"
                    "9123456789",
                    KeyboardManager.get_phone_keyboard(platform)
                )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        elif normalized_text == "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await self.send_message(
                platform, user_id,
                "üìû **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
                "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\n"
                "üì± WhatsApp: +79063405556",
                KeyboardManager.get_actions_keyboard(platform)
            )

        elif normalized_text == "–Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–≥":
            await self.send_message(
                platform, user_id,
                "üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram**\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram: @max_lap555\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +79063405556",
                KeyboardManager.get_actions_keyboard(platform)
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await self.handle_start(platform, user_id)

    async def send_final_summary(self, platform: Platform, user_id: int):
        user_data = self.get_user_data(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        summary = "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        summary += "üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"

        category = user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        summary += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"

        if category == '–∫—É—Ö–Ω—è':
            summary += f"‚Ä¢ –¢–∏–ø –∫—É—Ö–Ω–∏: {user_data.get('kitchen_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {user_data.get('material', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –§—É—Ä–Ω–∏—Ç—É—Ä–∞: {user_data.get('hardware', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == '—à–∫–∞—Ñ':
            summary += f"‚Ä¢ –¢–∏–ø —à–∫–∞—Ñ–∞: {user_data.get('cabinet_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == '–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è':
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"‚Ä¢ –°—Ä–æ–∫–∏: {user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"‚Ä¢ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

        summary += "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        summary += "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\n"
        summary += "üì± WhatsApp: +79063405556\n\n"
        summary += "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

        await self.send_message(
            platform, user_id, summary,
            KeyboardManager.get_contact_final_keyboard(platform)
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏
        self.clear_user_data(user_id)


# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Telegram
class TelegramAdapter:
    def __init__(self, token: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.application = ApplicationBuilder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.bot_core.handle_start(Platform.TELEGRAM, update.effective_user.id)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await self.bot_core.handle_callback(
            Platform.TELEGRAM,
            update.effective_user.id,
            query.data,
            query.message.message_id
        )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.bot_core.handle_text_message(
            Platform.TELEGRAM,
            update.effective_user.id,
            update.message.text
        )

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_data = self.bot_core.get_user_data(user_id)

        if user_data.get('waiting_for') == 'phone':
            phone_number = update.message.contact.phone_number
            user_data['phone'] = phone_number
            user_data['waiting_for'] = None
            await self.bot_core.send_final_summary(Platform.TELEGRAM, user_id)

    async def send_message(self, user_id: int, text: str, keyboard=None):
        # –£–±–∏—Ä–∞–µ–º parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å Markdown
        await self.application.bot.send_message(
            chat_id=user_id, text=text, reply_markup=keyboard
        )

    async def edit_message(self, user_id: int, message_id: int, text: str, keyboard=None):
        await self.application.bot.edit_message_text(
            chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard
        )

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()


# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è VK
class VKAdapter:
    def __init__(self, token: str, group_id: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.vk_session = vk_api.VkApi(token=token)
        self.vk = self.vk_session.get_api()
        self.group_id = group_id

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Poll...")
        try:
            longpoll = VkBotLongPoll(self.vk_session, self.group_id)
            logger.info("‚úì Long Poll –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

            logger.info("VK –±–æ—Ç –≥–æ—Ç–æ–≤! –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")

            for event in longpoll.listen():
                logger.info(f"VK: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞: {event.type}")

                if event.type == VkBotEventType.MESSAGE_NEW:
                    self.handle_message(event)
                elif event.type == VkBotEventType.MESSAGE_EVENT:
                    self.handle_callback(event)
                else:
                    logger.info(f"VK: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event.type}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    def handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = event.obj.message['from_id']
            text = event.obj.message['text']

            logger.info(f"VK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=lambda: asyncio.run(
                    self.process_message(user_id, text)
                )
            ).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def handle_callback(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            logger.info(f"VK: Callback —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
            logger.info(f"VK: Event object: {event.obj}")

            user_id = event.obj.user_id
            payload = event.obj.payload

            logger.info(f"VK: Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"VK: Payload: {payload}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ payload
            if isinstance(payload, dict):
                command = payload.get('command', '')
            elif isinstance(payload, str):
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å—Ç—Ä–æ–∫—É
                try:
                    payload_dict = json.loads(payload)
                    command = payload_dict.get('command', '')
                except:
                    command = payload
            else:
                command = str(payload)

            logger.info(f"VK: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback (–í–ê–ñ–ù–û!) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π json
            self.vk.messages.sendMessageEventAnswer(
                event_id=event.obj.event_id,
                user_id=user_id,
                peer_id=event.obj.peer_id,
                event_data=json.dumps({"type": "show_snackbar", "text": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."})
            )

            logger.info("VK: –û—Ç–≤–µ—Ç –Ω–∞ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
            threading.Thread(
                target=lambda: asyncio.run(
                    self.process_callback(user_id, command)
                )
            ).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def process_message(self, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            normalized_text = text.lower().strip()

            if normalized_text in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '–º–µ–Ω—é']:
                await self.bot_core.handle_start(Platform.VK, user_id)
            else:
                await self.bot_core.handle_text_message(Platform.VK, user_id, text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_message: {e}")

    async def process_callback(self, user_id: int, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–æ–º–∞–Ω–¥—ã"""
        try:
            logger.info(f"VK: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–æ–º–∞–Ω–¥—ã: '{command}'")
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞, message_id –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è VK
            await self.bot_core.handle_callback(Platform.VK, user_id, command)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_callback: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def send_message(self, user_id: int, text: str, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"VK: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            logger.info(f"VK: –¢–µ–∫—Å—Ç: {text}")

            params = {
                'user_id': user_id,
                'message': text,
                'random_id': get_random_id(),
                'dont_parse_links': 1
            }

            if keyboard:
                logger.info("VK: –î–æ–±–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
                params['keyboard'] = keyboard

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    if isinstance(keyboard, str):
                        keyboard_obj = json.loads(keyboard)
                    else:
                        keyboard_obj = keyboard
                    logger.info(
                        f"VK: –ö–Ω–æ–ø–∫–∏: {[btn['action']['label'] for row in keyboard_obj['buttons'] for btn in row]}")
                except Exception as e:
                    logger.error(f"VK: –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

            result = self.vk.messages.send(**params)
            logger.info(f"VK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {result}")
            return result

        except Exception as e:
            logger.error(f"VK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            import traceback
            logger.error(f"VK: –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def edit_message(self, user_id: int, message_id: int, text: str, keyboard=None):
        """–í VK —á–µ—Ä–µ–∑ Long Poll –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ"""
        await self.send_message(user_id, text, keyboard)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")

    bot_core = FurnitureBotCore()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    telegram_adapter = TelegramAdapter(TELEGRAM_TOKEN, bot_core)
    vk_adapter = VKAdapter(VK_TOKEN, VK_GROUP_ID, bot_core)

    bot_core.register_adapter(Platform.TELEGRAM, telegram_adapter)
    bot_core.register_adapter(Platform.VK, vk_adapter)

    # –ó–∞–ø—É—Å–∫–∞–µ–º VK –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_vk():
        vk_adapter.run()

    vk_thread = threading.Thread(target=run_vk, daemon=True)
    vk_thread.start()

    logger.info("VK: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info("Telegram: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

    # –ó–∞–ø—É—Å–∫ Telegram –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    telegram_adapter.run()

    logger.info("–û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")


    try:
        # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤...")


if __name__ == '__main__':
    main()
