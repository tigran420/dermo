
import asyncio
import json
import logging
import threading
import time
from enum import Enum
from typing import Dict, Any, Optional, List

# VK imports
import vk_api  # type: ignore

# Telegram imports
from telegram import ( # type: ignore
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
)
from telegram.error import TelegramError # type: ignore
from telegram.ext import ( # type: ignore
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)  # type: ignore

from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType  # type: ignore
import requests  # type: ignore

TELEGRAM_TOKEN = "8295931339:AAEP07XBDZ7FBIGSZg7SOZ8g7Sc_hsml8h0"
TELEGRAM_CHAT_ID = "-1003166604153"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ Telegram. –î–ª—è –≥—Ä—É–ø–ø ID –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100.
VK_TOKEN = "vk1.a.n4dL5gno1RVu0PQF9TzSbP6f-BKHcVlxZpvX6HIfX_tMW-w83pAHledqgAGDNrp-Ytuncm0TzZQYj_uiiX2S_up9eVvEzmhznIv8R5NP1momCUlVlCl8P4WthKeZM_sr86mVRimxeexXs0nCnAlO8C7IGRCtjvYbVUkLM9_DtDCb0qYWDSZImAO5qpr1ipbaXVjZV_FRsgKcGuO_UYJYDA"
VK_GROUP_ID = "228885547"

# URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
WELCOME_PHOTOS = [
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(2).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(3).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(4).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(5).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(6).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(7).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58.jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-59.jpg",
]

MATERIAL_PHOTOS = {
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "https://raw.githubusercontent.com/Egorinho77/eban-/refs/heads/main/photo_2025-10-11_00-34-48.jpg",
}

def send_telegram_application(application_data):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logging.warning("Telegram bot token or chat ID not configured. Skipping sending application to Telegram group.")
        return

    # –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
    message_text = "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
    exclude_keys = {"current_step", "waiting_for"}

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key, value in application_data.items():
        if key not in exclude_keys and value not in [None, "", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"]:
            message_text += f"{key}: {value}\n"

    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Telegram API
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message_text,
        "parse_mode": "HTML",
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram-–≥—Ä—É–ø–ø—É: {response.json()}")
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram-–≥—Ä—É–ø–ø—É: {e}")

from vk_api.utils import get_random_id  # type: ignore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class Platform(Enum):
    TELEGRAM = "telegram"
    VK = "vk"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!ü§ù\n"
    "–ù–∞ —Å–≤—è–∑–∏ 2–ú –§–ê–ë–†–ò–ö–ê –ú–ï–ë–ï–õ–ò!\n\n"

    "–ú—ã –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–ø—É—Å–Ω—É—é –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å —Å 1993 –≥–æ–¥–∞, –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º:\n"
    "–∫—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã-–∫—É–ø–µ, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ, –º–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"

    "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤, –¥–µ–ª–∞–µ–º –≤—Å–µ —Å–∞–º–∏ –æ—Ç –∑–∞–º–µ—Ä–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n"
    "–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–æ–ª–µ–µ 1000 —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫, –æ—Ç –õ–î–°–ü –¥–æ –≠–º–∞–ª–∏ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã (Blum, Hettich, Boyard –∏ –¥—Ä.).\n"
    "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É.\n\n"

    "–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ù–ï –ë–ï–†–Å–ú –ø–ª–∞—Ç—ã –∑–∞ –≤—ã—Ä–µ–∑—ã: –ø–æ–¥ –≤–∞—Ä–æ—á–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –ø–æ–¥ —Å–∞–Ω —É–∑–ª—ã, –ø–æ–¥ –ø–ª–∏–Ω—Ç—É—Å–∞, –ø–æ–¥ –º–æ–π–∫—É –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥–∏–µ –º–µ–±–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 24 –º–µ—Å—è—Ü–∞ –Ω–∞ –≤—Å—é –ø—Ä–æ–¥—É–∫—Ü–∏—é!\n"
    "–¶–µ–Ω—ã –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤—è—Ç!\n"
    "–†–∞—Å—Å—Ä–æ—á–∫–∞!!!"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data: Dict[int, Dict[str, Any]] = {}

class KeyboardManager:
    @staticmethod
    def get_initial_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–ö—É—Ö–Ω—è", callback_data="–∫—É—Ö–Ω—è")],
                [InlineKeyboardButton("–®–∫–∞—Ñ", callback_data="—à–∫–∞—Ñ")],
                [InlineKeyboardButton("–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", callback_data="–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è")],
                [InlineKeyboardButton("–ü—Ä–∏—Ö–æ–∂–∞—è", callback_data="–ø—Ä–∏—Ö–æ–∂–∞—è")],
                [InlineKeyboardButton("–ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π", callback_data="–≤–∞–Ω–Ω–∞—è")],
                [InlineKeyboardButton("–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å", callback_data="–¥—Ä—É–≥–æ–µ")],
                [InlineKeyboardButton("–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π", callback_data="—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üç≥ –ö—É—Ö–Ω—è", "payload": "{\"command\": \"–∫—É—Ö–Ω—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üö™ –®–∫–∞—Ñ", "payload": "{\"command\": \"—à–∫–∞—Ñ\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üëî –ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "payload": "{\"command\": \"–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üõã –ü—Ä–∏—Ö–æ–∂–∞—è", "payload": "{\"command\": \"–ø—Ä–∏—Ö–æ–∂–∞—è\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üõÅ –ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π", "payload": "{\"command\": \"–≤–∞–Ω–Ω–∞—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üõã –î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å", "payload": "{\"command\": \"–¥—Ä—É–≥–æ–µ\"}"}, "color": "secondary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π", "payload": "{\"command\": \"—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π\"}"}, "color": "positive"}
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_service_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            return None
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üìè –ó–∞–º–µ—Ä—ã", "payload": "{\"command\": \"—É—Å–ª—É–≥–∞_–∑–∞–º–µ—Ä—ã\"}"}, "color": "positive"},
                        {"action": {"type": "callback", "label": "üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", "payload": "{\"command\": \"—É—Å–ª—É–≥–∞_—Å—Ç–æ–∏–º–æ—Å—Ç—å\"}"}, "color": "primary"}
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_—Å—Ä–æ–∫–∏\"}"}, "color": "negative"}
                    ]
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_contact_final_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [[KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "payload": "{\"command\": \"–ø–æ_—Ç–µ–ª–µ—Ñ–æ–Ω—É\"}"}, "color": "positive"},
                        {"action": {"type": "callback", "label": "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram", "payload": "{\"command\": \"—Å–æ–æ–±—â–µ–Ω–∏–µ_—Ç–≥\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "payload": "{\"command\": \"–Ω–∞—á–∞—Ç—å_–∑–∞–Ω–æ–≤–æ\"}"}, "color": "secondary"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_phone_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)], [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        else:  # VK
            return None

    @staticmethod
    def get_kitchen_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–£–≥–ª–æ–≤–∞—è", callback_data="–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è")],
                [InlineKeyboardButton("–ü—Ä—è–º–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è")],
                [InlineKeyboardButton("–ü-–æ–±—Ä–∞–∑–Ω–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è")],
                [InlineKeyboardButton("–° –æ—Å—Ç—Ä–æ–≤–æ–º", callback_data="–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üìê –£–≥–ª–æ–≤–∞—è", "payload": "{\"command\": \"–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üìè –ü—Ä—è–º–∞—è", "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîÑ –ü-–æ–±—Ä–∞–∑–Ω–∞—è", "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üèù –° –æ—Å—Ç—Ä–æ–≤–æ–º", "payload": "{\"command\": \"–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_cabinet_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–†–∞—Å–ø–∞—à–Ω–æ–π", callback_data="—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π")],
                [InlineKeyboardButton("–ö—É–ø–µ", callback_data="—à–∫–∞—Ñ_–∫—É–ø–µ")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üö™ –†–∞—Å–ø–∞—à–Ω–æ–π", "payload": "{\"command\": \"—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üö∂ –ö—É–ø–µ", "payload": "{\"command\": \"—à–∫–∞—Ñ_–∫—É–ø–µ\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_hallway_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–ü—Ä—è–º–∞—è", callback_data="–ø—Ä–∏—Ö–æ–∂–∞—è_–ø—Ä—è–º–∞—è")],
                [InlineKeyboardButton("–£–≥–ª–æ–≤–∞—è", callback_data="–ø—Ä–∏—Ö–æ–∂–∞—è_—É–≥–ª–æ–≤–∞—è")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üìè –ü—Ä—è–º–∞—è", "payload": "{\"command\": \"–ø—Ä–∏—Ö–æ–∂–∞—è_–ø—Ä—è–º–∞—è\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üìê –£–≥–ª–æ–≤–∞—è", "payload": "{\"command\": \"–ø—Ä–∏—Ö–æ–∂–∞—è_—É–≥–ª–æ–≤–∞—è\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_bathroom_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–¢—É–º–±–∞ –ø–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω—É", callback_data="–≤–∞–Ω–Ω–∞—è_—Ç—É–º–±–∞")],
                [InlineKeyboardButton("–®–∫–∞—Ñ-–ø–µ–Ω–∞–ª", callback_data="–≤–∞–Ω–Ω–∞—è_–ø–µ–Ω–∞–ª")],
                [InlineKeyboardButton("–ó–µ—Ä–∫–∞–ª–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π", callback_data="–≤–∞–Ω–Ω–∞—è_–∑–µ—Ä–∫–∞–ª–æ")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üö∞ –¢—É–º–±–∞ –ø–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω—É", "payload": "{\"command\": \"–≤–∞–Ω–Ω–∞—è_—Ç—É–º–±–∞\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üß∫ –®–∫–∞—Ñ-–ø–µ–Ω–∞–ª", "payload": "{\"command\": \"–≤–∞–Ω–Ω–∞—è_–ø–µ–Ω–∞–ª\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üí° –ó–µ—Ä–∫–∞–ª–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π", "payload": "{\"command\": \"–≤–∞–Ω–Ω–∞—è_–∑–µ—Ä–∫–∞–ª–æ\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_size_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_—Ç–∏–ø"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–¢–æ—á–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ")],
                [InlineKeyboardButton("–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ")],
                [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üìè –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ\"}"}, "color": "positive"},
                        {"action": {"type": "callback", "label": "üìê –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "‚ùì –ù–µ –∑–Ω–∞—é", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é\"}"}, "color": "secondary"},
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": f"{{\"command\": \"{back_callback}\"}}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_approximate_size_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("1,5 - 2 –º", callback_data="—Ä–∞–∑–º–µ—Ä_1.5_2")],
                [InlineKeyboardButton("2 - 2,5 –º", callback_data="—Ä–∞–∑–º–µ—Ä_2_2.5")],
                [InlineKeyboardButton("2,5 - 3 –º", callback_data="—Ä–∞–∑–º–µ—Ä_2.5_3")],
                [InlineKeyboardButton("3 - 3,5 –º", callback_data="—Ä–∞–∑–º–µ—Ä_3_3.5")],
                [InlineKeyboardButton("3,5 - 4 –º", callback_data="—Ä–∞–∑–º–µ—Ä_3.5_4")],
                [InlineKeyboardButton("4 - 4,5 –º", callback_data="—Ä–∞–∑–º–µ—Ä_4_4.5")],
                [InlineKeyboardButton("4,5 - 5 –º", callback_data="—Ä–∞–∑–º–µ—Ä_4.5_5")],
                [InlineKeyboardButton("–ë–æ–ª–µ–µ 5 –º", callback_data="—Ä–∞–∑–º–µ—Ä_–±–æ–ª–µ–µ_5")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "1,5 - 2 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_1.5_2\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "2 - 2,5 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_2_2.5\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "2,5 - 3 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_2.5_3\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "3 - 3,5 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_3_3.5\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "3,5 - 4 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_3.5_4\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "4 - 4,5 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_4_4.5\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "4,5 - 5 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_4.5_5\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "–ë–æ–ª–µ–µ 5 –º", "payload": "{\"command\": \"—Ä–∞–∑–º–µ—Ä_–±–æ–ª–µ–µ_5\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": f"{{\"command\": \"{back_callback}\"}}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_material_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–õ–î–°–ü", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø")],
                [InlineKeyboardButton("–ê–ì–¢", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç")],
                [InlineKeyboardButton("–≠–º–∞–ª—å", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å")],
                [InlineKeyboardButton("–ü–ª–∞—Å—Ç–∏–∫", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–ø–ª–∞—Å—Ç–∏–∫")],
                [InlineKeyboardButton("–ê–∫—Ä–∏–ª", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–∫—Ä–∏–ª")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üå≥ –õ–î–°–ü", "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "‚ú® –ê–ì–¢", "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üé® –≠–º–∞–ª—å", "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üî≤ –ü–ª–∞—Å—Ç–∏–∫", "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–ø–ª–∞—Å—Ç–∏–∫\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üíé –ê–∫—Ä–∏–ª", "payload": "{\"command\": \"–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–∫—Ä–∏–ª\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_hardware_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üí∞ –≠–∫–æ–Ω–æ–º", "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç", "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üëë –ü—Ä–µ–º–∏—É–º", "payload": "{\"command\": \"—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": "{\"command\": \"–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª\"}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_budget_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_–ø—Ä–µ–¥—ã–¥—É—â–∏–π"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º - (–¥–æ 150 —Ç—ã—Å —Ä—É–±)", callback_data="–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç - (150-300 —Ç—ã—Å —Ä—É–±)", callback_data="–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º - (–æ—Ç 300 —Ç—ã—Å —Ä—É–±)", callback_data="–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üí∞ –≠–∫–æ–Ω–æ–º", "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç", "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üëë –ü—Ä–µ–º–∏—É–º", "payload": "{\"command\": \"–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": f"{{\"command\": \"{back_callback}\"}}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_deadline_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="—Å—Ä–æ–∫_–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("1-2 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_1_2")],
                [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_3")],
                [InlineKeyboardButton("–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", callback_data="—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:  # VK
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "payload": "{\"command\": \"—Å—Ä–æ–∫_–º–µ—Å—è—Ü\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "‚è≥ 1-2 –º–µ—Å—è—Ü–∞", "payload": "{\"command\": \"—Å—Ä–æ–∫_1_2\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üìÖ 3 –º–µ—Å—è—Ü–∞", "payload": "{\"command\": \"—Å—Ä–æ–∫_3\"}"}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üëÄ –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", "payload": "{\"command\": \"—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä\"}"}, "color": "primary"},
                    ],
                    [
                        {"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": f"{{\"command\": \"{back_callback}\"}}"}, "color": "negative"},
                    ],
                ],
            }
            return json.dumps(keyboard, ensure_ascii=False)

class FurnitureBotCore:
    def __init__(self):
        self.adapters: Dict[Platform, Any] = {}

    def register_adapter(self, platform: Platform, adapter):
        self.adapters[platform] = adapter

    async def send_message(self, platform: Platform, user_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].send_message(user_id, text, keyboard)

    async def edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].edit_message(user_id, message_id, text, keyboard)

    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if user_id not in user_data:
            user_data[user_id] = {}
        return user_data[user_id]

    def clear_user_data(self, user_id: int):
        if user_id in user_data:
            del user_data[user_id]

    async def handle_start(self, platform: Platform, user_id: int):
        self.clear_user_data(user_id)
        await self.send_photo_album(
            platform, user_id, WELCOME_PHOTOS, WELCOME_MESSAGE, KeyboardManager.get_initial_keyboard(platform)
        )

    async def request_service_type(self, platform: Platform, user_id: int, message_id: int = None):
        if platform != Platform.VK:
            return
            
        text = "üìã **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**\n\n‚Ä¢ üìè –ó–∞–º–µ—Ä—ã - –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏–µ–¥–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤\n‚Ä¢ üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ–±–µ–ª–∏"
        
        if message_id:
            await self.edit_message(platform, user_id, message_id, text, KeyboardManager.get_service_keyboard(platform))
        else:
            await self.send_message(platform, user_id, text, KeyboardManager.get_service_keyboard(platform))
        self.get_user_data(user_id)["current_step"] = "service_type"

    async def request_name(self, platform: Platform, user_id: int, message_id: int = None):
        text = "üë§ **–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        if message_id and platform == Platform.TELEGRAM:
            await self.edit_message(platform, user_id, message_id, text)
        else:
            await self.send_message(platform, user_id, text)
        self.get_user_data(user_id)["waiting_for"] = "name"

    async def request_phone(self, platform: Platform, user_id: int):
        text = (
            f"üë§ **–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
            f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )

        keyboard = KeyboardManager.get_phone_keyboard(platform) if platform == Platform.TELEGRAM else None

        await self.send_message(
            platform,
            user_id,
            text,
            keyboard
        )
        self.get_user_data(user_id)["waiting_for"] = "phone"

    async def handle_callback(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        user_data_local = self.get_user_data(user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if data.startswith("–Ω–∞–∑–∞–¥_"):
            await self.handle_back_button(platform, user_id, data, message_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è VK)
        if data.startswith("—É—Å–ª—É–≥–∞_"):
            if data == "—É—Å–ª—É–≥–∞_–∑–∞–º–µ—Ä—ã":
                user_data_local["service_type"] = "–ó–∞–º–µ—Ä—ã"
                await self.request_name(platform, user_id, message_id)
                return
            elif data == "—É—Å–ª—É–≥–∞_—Å—Ç–æ–∏–º–æ—Å—Ç—å":
                user_data_local["service_type"] = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
                user_data_local["note"] = "‚ùóÔ∏è–°–ú–û–¢–†–ò VK - –Ω—É–∂–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
                send_telegram_application(user_data_local)
                
                cost_message = (
                    "üí∞ **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏**\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º! "
                    "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ "
                    "–¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
                    "–ú—ã —É—á—Ç–µ–º –≤—Å–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º "
                    "–ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ–±–µ–ª–∏."
                )
                await self.send_or_edit_message(platform, user_id, message_id, cost_message)
                
                await asyncio.sleep(2)
                await self.send_message(
                    platform, user_id, 
                    "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–º–µ—Ä—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–µ–±–µ–ª—å?",
                    KeyboardManager.get_initial_keyboard(platform)
                )
                self.clear_user_data(user_id)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π"
        if data == "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π":
            user_data_local["category"] = "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π"
            if platform == Platform.VK:
                await self.request_service_type(platform, user_id, message_id)
            else:
                await self.request_name(platform, user_id, message_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data in ["–∫—É—Ö–Ω—è", "—à–∫–∞—Ñ", "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞—è", "–≤–∞–Ω–Ω–∞—è", "–¥—Ä—É–≥–æ–µ"]:
            user_data_local["category"] = data
            
            if data == "–∫—É—Ö–Ω—è":
                user_data_local["current_step"] = "kitchen_type"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                    KeyboardManager.get_kitchen_type_keyboard(platform)
                )
            elif data == "—à–∫–∞—Ñ":
                user_data_local["current_step"] = "cabinet_type"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                    KeyboardManager.get_cabinet_type_keyboard(platform)
                )
            elif data == "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
                user_data_local["current_step"] = "size"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                    KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                )
            elif data == "–ø—Ä–∏—Ö–æ–∂–∞—è":
                user_data_local["current_step"] = "hallway_type"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üõã **–ü—Ä–∏—Ö–æ–∂–∞—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—Ö–æ–∂–µ–π:",
                    KeyboardManager.get_hallway_type_keyboard(platform)
                )
            elif data == "–≤–∞–Ω–Ω–∞—è":
                user_data_local["current_step"] = "bathroom_type"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üõÅ **–ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–±–µ–ª–∏ –¥–ª—è –≤–∞–Ω–Ω–æ–π:",
                    KeyboardManager.get_bathroom_type_keyboard(platform)
                )
            elif data == "–¥—Ä—É–≥–æ–µ":
                user_data_local["current_step"] = "other_furniture_text"
                await self.send_or_edit_message(platform, user_id, message_id,
                                                "üõã **–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –º–µ–±–µ–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
                user_data_local["waiting_for"] = "other_furniture_description"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ö–£–•–ù–Ø
        elif data.startswith("–∫—É—Ö–Ω—è_"):
            if data == "–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è":
                user_data_local["kitchen_type"] = "–£–≥–ª–æ–≤–∞—è"
            elif data == "–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è":
                user_data_local["kitchen_type"] = "–ü—Ä—è–º–∞—è"
            elif data == "–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è":
                user_data_local["kitchen_type"] = "–ü-–æ–±—Ä–∞–∑–Ω–∞—è"
            elif data == "–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤":
                user_data_local["kitchen_type"] = "–° –æ—Å—Ç—Ä–æ–≤–æ–º"
            user_data_local["current_step"] = "size"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ç–∏–ø")
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ü–†–ò–•–û–ñ–ê–Ø
        elif data.startswith("–ø—Ä–∏—Ö–æ–∂–∞—è_"):
            if data == "–ø—Ä–∏—Ö–æ–∂–∞—è_–ø—Ä—è–º–∞—è":
                user_data_local["hallway_type"] = "–ü—Ä—è–º–∞—è"
            elif data == "–ø—Ä–∏—Ö–æ–∂–∞—è_—É–≥–ª–æ–≤–∞—è":
                user_data_local["hallway_type"] = "–£–≥–ª–æ–≤–∞—è"
            user_data_local["current_step"] = "size"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ç–∏–ø")
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –í–ê–ù–ù–ê–Ø
        elif data.startswith("–≤–∞–Ω–Ω–∞—è_"):
            if data == "–≤–∞–Ω–Ω–∞—è_—Ç—É–º–±–∞":
                user_data_local["bathroom_type"] = "–¢—É–º–±–∞ –ø–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω—É"
            elif data == "–≤–∞–Ω–Ω–∞—è_–ø–µ–Ω–∞–ª":
                user_data_local["bathroom_type"] = "–®–∫–∞—Ñ-–ø–µ–Ω–∞–ª"
            elif data == "–≤–∞–Ω–Ω–∞—è_–∑–µ—Ä–∫–∞–ª–æ":
                user_data_local["bathroom_type"] = "–ó–µ—Ä–∫–∞–ª–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"
            user_data_local["current_step"] = "size"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ç–∏–ø")
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –®–ö–ê–§
        elif data.startswith("—à–∫–∞—Ñ_"):
            if data == "—à–∫–∞—Ñ_—Ä–∞—Å–ø–∞—à–Ω–æ–π":
                user_data_local["cabinet_type"] = "–†–∞—Å–ø–∞—à–Ω–æ–π"
            elif data == "—à–∫–∞—Ñ_–∫—É–ø–µ":
                user_data_local["cabinet_type"] = "–ö—É–ø–µ"
            user_data_local["current_step"] = "size"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ç–∏–ø")
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        elif data.startswith("—Ä–∞–∑–º–µ—Ä_"):
            if data == "—Ä–∞–∑–º–µ—Ä_—Ç–æ—á–Ω—ã–µ":
                user_data_local["size"] = "–¢–æ—á–Ω—ã–µ"
                user_data_local["waiting_for"] = "exact_size"
                await self.send_or_edit_message(
                    platform, user_id, message_id, 
                    "üìè **–¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5–º —Ö 1.8–º):"
                )
                return
            elif data == "—Ä–∞–∑–º–µ—Ä_–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ":
                user_data_local["size"] = "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ"
                await self.send_or_edit_message(
                    platform, user_id, message_id,
                    "üìê **–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤:",
                    KeyboardManager.get_approximate_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")
                )
                return
            elif data == "—Ä–∞–∑–º–µ—Ä_–Ω–µ_–∑–Ω–∞—é":
                user_data_local["size"] = "–ù–µ –∑–Ω–∞—é"
            elif data in ["—Ä–∞–∑–º–µ—Ä_1.5_2", "—Ä–∞–∑–º–µ—Ä_2_2.5", "—Ä–∞–∑–º–µ—Ä_2.5_3", "—Ä–∞–∑–º–µ—Ä_3_3.5", 
                          "—Ä–∞–∑–º–µ—Ä_3.5_4", "—Ä–∞–∑–º–µ—Ä_4_4.5", "—Ä–∞–∑–º–µ—Ä_4.5_5", "—Ä–∞–∑–º–µ—Ä_–±–æ–ª–µ–µ_5"]:
                size_map = {
                    "—Ä–∞–∑–º–µ—Ä_1.5_2": "1,5 - 2 –º",
                    "—Ä–∞–∑–º–µ—Ä_2_2.5": "2 - 2,5 –º", 
                    "—Ä–∞–∑–º–µ—Ä_2.5_3": "2,5 - 3 –º",
                    "—Ä–∞–∑–º–µ—Ä_3_3.5": "3 - 3,5 –º",
                    "—Ä–∞–∑–º–µ—Ä_3.5_4": "3,5 - 4 –º",
                    "—Ä–∞–∑–º–µ—Ä_4_4.5": "4 - 4,5 –º",
                    "—Ä–∞–∑–º–µ—Ä_4.5_5": "4,5 - 5 –º",
                    "—Ä–∞–∑–º–µ—Ä_–±–æ–ª–µ–µ_5": "–ë–æ–ª–µ–µ 5 –º"
                }
                user_data_local["approximate_size"] = size_map[data]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = user_data_local.get("category", "")
            if category == "–∫—É—Ö–Ω—è":
                user_data_local["current_step"] = "material"
                await self.send_material_options(platform, user_id, message_id)
            elif category in ["—à–∫–∞—Ñ", "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞—è", "–≤–∞–Ω–Ω–∞—è", "–¥—Ä—É–≥–æ–µ"]:
                user_data_local["current_step"] = "budget"
                await self.send_or_edit_message(
                    platform, user_id, message_id, "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                    KeyboardManager.get_budget_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")
                )

        elif data.startswith("–º–∞—Ç–µ—Ä–∏–∞–ª_"):
            if data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø":
                user_data_local["material"] = "–õ–î–°–ü"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç":
                user_data_local["material"] = "–ê–ì–¢"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å":
                user_data_local["material"] = "–≠–º–∞–ª—å"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–ø–ª–∞—Å—Ç–∏–∫":
                user_data_local["material"] = "–ü–ª–∞—Å—Ç–∏–∫"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–∫—Ä–∏–ª":
                user_data_local["material"] = "–ê–∫—Ä–∏–ª"

            material_key = data.replace("–º–∞—Ç–µ—Ä–∏–∞–ª_", "")
            photo_url = MATERIAL_PHOTOS.get(material_key)
            if photo_url:
                await self.send_photo_album(platform, user_id, [photo_url],
                                            f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö: {user_data_local['material']}")

            user_data_local["current_step"] = "hardware"
            await self.send_message(platform, user_id, "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                                    KeyboardManager.get_hardware_keyboard(platform))

        elif data.startswith("—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_"):
            if data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º":
                user_data_local["hardware"] = "–≠–∫–æ–Ω–æ–º"
            elif data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
                user_data_local["hardware"] = "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
            elif data == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º":
                user_data_local["hardware"] = "–ü—Ä–µ–º–∏—É–º"
            user_data_local["current_step"] = "budget"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                KeyboardManager.get_budget_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞")
            )

        elif data.startswith("–±—é–¥–∂–µ—Ç_"):
            if data == "–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º":
                user_data_local["budget"] = "–≠–∫–æ–Ω–æ–º"
            elif data == "–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
                user_data_local["budget"] = "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
            elif data == "–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º":
                user_data_local["budget"] = "–ü—Ä–µ–º–∏—É–º"
            user_data_local["current_step"] = "deadline"
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìÖ **–°—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:",
                KeyboardManager.get_deadline_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç")
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–∫–∞–∑–∞
        elif data.startswith("—Å—Ä–æ–∫_"):
            if data == "—Å—Ä–æ–∫_–º–µ—Å—è—Ü":
                user_data_local["deadline"] = "–≠—Ç–æ—Ç –º–µ—Å—è—Ü"
            elif data == "—Å—Ä–æ–∫_1_2":
                user_data_local["deadline"] = "1-2 –º–µ—Å—è—Ü–∞"
            elif data == "—Å—Ä–æ–∫_3":
                user_data_local["deadline"] = "3 –º–µ—Å—è—Ü–∞"
            elif data == "—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä":
                user_data_local["deadline"] = "–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å"
            
            if platform == Platform.VK:
                await self.request_service_type(platform, user_id, message_id)
            else:
                await self.request_name(platform, user_id, message_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è VK
        elif data == "–≤–≤–µ—Å—Ç–∏_—Ç–µ–ª–µ—Ñ–æ–Ω":
            await self.send_or_edit_message(platform, user_id, message_id,
                                            "üì± **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:**\n\n–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX")
            user_data_local["waiting_for"] = "phone"
        elif data == "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìû **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\nüì± WhatsApp: +79063405556",
                KeyboardManager.get_contact_final_keyboard(platform),
            )
        elif data == "–Ω–∞–ø–∏—Å–∞—Ç—å_—Ç–≥":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram**\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram: @max_lap555\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +79063405556",
                KeyboardManager.get_contact_final_keyboard(platform),
            )
        elif data == "–ø–æ_—Ç–µ–ª–µ—Ñ–æ–Ω—É":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üìû **–°–≤—è–∑—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É**\n\n–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É:\nüì± +79063405556\n\n–ú—ã –¥–æ—Å—Ç—É–ø–Ω—ã:\n‚Ä¢ –ü–Ω-–ü—Ç: 9:00-18:00\n‚Ä¢ –°–±: 10:00-16:00",
                KeyboardManager.get_contact_final_keyboard(platform),
            )
        elif data == "—Å–æ–æ–±—â–µ–Ω–∏–µ_—Ç–≥":
            await self.send_or_edit_message(
                platform, user_id, message_id,
                "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram:\nüë§ @max_lap555\n\n–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://t.me/max_lap555",
                KeyboardManager.get_contact_final_keyboard(platform),
            )
        elif data == "–Ω–∞—á–∞—Ç—å_–∑–∞–Ω–æ–≤–æ":
            self.clear_user_data(user_id)
            await self.handle_start(platform, user_id)

    async def send_material_options(self, platform: Platform, user_id: int, message_id: int = None):
        await self.send_or_edit_message(platform, user_id, message_id, "üé® **–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ–∞—Å–∞–¥–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:",
                                        KeyboardManager.get_material_keyboard(platform))
        for material_name, photo_url in MATERIAL_PHOTOS.items():
            material_display_name = material_name.upper()
            await self.send_photo_album(platform, user_id, [photo_url], f"{material_display_name}")

    async def send_or_edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if message_id and platform == Platform.TELEGRAM:
            await self.edit_message(platform, user_id, message_id, text, keyboard)
        else:
            await self.send_message(platform, user_id, text, keyboard)

    async def send_photo_album(self, platform: Platform, user_id: int, photo_urls: list, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].send_photo_album(user_id, photo_urls, text, keyboard)

    async def handle_back_button(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        back_step = data.replace("–Ω–∞–∑–∞–¥_", "")
        user_data_local = self.get_user_data(user_id)

        if back_step == "—É—Å–ª—É–≥–∞":
            await self.send_or_edit_message(
                platform, user_id, message_id, "üìÖ **–°—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:",
                KeyboardManager.get_deadline_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç")
            )
        elif back_step == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            self.clear_user_data(user_id)
            await self.send_or_edit_message(platform, user_id, message_id, WELCOME_MESSAGE,
                                            KeyboardManager.get_initial_keyboard(platform))
        elif back_step == "—Ç–∏–ø":
            category = user_data_local.get("category", "")
            if category == "–∫—É—Ö–Ω—è":
                await self.send_or_edit_message(platform, user_id, message_id, "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                                                KeyboardManager.get_kitchen_type_keyboard(platform))
            elif category == "—à–∫–∞—Ñ":
                await self.send_or_edit_message(platform, user_id, message_id, "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                                                KeyboardManager.get_cabinet_type_keyboard(platform))
            elif category == "–ø—Ä–∏—Ö–æ–∂–∞—è":
                await self.send_or_edit_message(platform, user_id, message_id, "üõã **–ü—Ä–∏—Ö–æ–∂–∞—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—Ö–æ–∂–µ–π:",
                                                KeyboardManager.get_hallway_type_keyboard(platform))
            elif category == "–≤–∞–Ω–Ω–∞—è":
                await self.send_or_edit_message(platform, user_id, message_id, "üõÅ **–ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–±–µ–ª–∏ –¥–ª—è –≤–∞–Ω–Ω–æ–π:",
                                                KeyboardManager.get_bathroom_type_keyboard(platform))
        elif back_step == "—Ä–∞–∑–º–µ—Ä":
            category = user_data_local.get("category", "")
            if category == "–∫—É—Ö–Ω—è":
                user_data_local["current_step"] = "kitchen_type"
                await self.send_or_edit_message(platform, user_id, message_id, "üè† **–ö—É—Ö–Ω—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:",
                                                KeyboardManager.get_kitchen_type_keyboard(platform))
            elif category == "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
                user_data_local["current_step"] = "size"
                await self.send_or_edit_message(platform, user_id, message_id, "üëî **–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                                                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
            elif category == "–ø—Ä–∏—Ö–æ–∂–∞—è":
                user_data_local["current_step"] = "hallway_type"
                await self.send_or_edit_message(platform, user_id, message_id, "üõã **–ü—Ä–∏—Ö–æ–∂–∞—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏—Ö–æ–∂–µ–π:",
                                                KeyboardManager.get_hallway_type_keyboard(platform))
            elif category == "–≤–∞–Ω–Ω–∞—è":
                user_data_local["current_step"] = "bathroom_type"
                await self.send_or_edit_message(platform, user_id, message_id, "üõÅ **–ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–±–µ–ª–∏ –¥–ª—è –≤–∞–Ω–Ω–æ–π:",
                                                KeyboardManager.get_bathroom_type_keyboard(platform))
            elif category == "—à–∫–∞—Ñ":
                user_data_local["current_step"] = "cabinet_type"
                await self.send_or_edit_message(platform, user_id, message_id, "üö™ **–®–∫–∞—Ñ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–∫–∞—Ñ–∞:",
                                                KeyboardManager.get_cabinet_type_keyboard(platform))
            elif category == "–¥—Ä—É–≥–æ–µ":
                user_data_local["current_step"] = "other_furniture_text"
                await self.send_or_edit_message(platform, user_id, message_id, "üõã **–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –º–µ–±–µ–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
                user_data_local["waiting_for"] = "other_furniture_description"
        elif back_step == "–º–∞—Ç–µ—Ä–∏–∞–ª":
            await self.send_material_options(platform, user_id, message_id)
        elif back_step == "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞":
            await self.send_or_edit_message(platform, user_id, message_id, "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                                            KeyboardManager.get_hardware_keyboard(platform))
        elif back_step == "–±—é–¥–∂–µ—Ç":
            category = user_data_local.get("category", "")
            if category == "–∫—É—Ö–Ω—è":
                await self.send_or_edit_message(platform, user_id, message_id, "üîß **–§—É—Ä–Ω–∏—Ç—É—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã:",
                                                KeyboardManager.get_hardware_keyboard(platform))
            elif category in ["—à–∫–∞—Ñ", "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞—è", "–≤–∞–Ω–Ω–∞—è", "–¥—Ä—É–≥–æ–µ"]:
                user_data_local["current_step"] = "size"
                await self.send_or_edit_message(platform, user_id, message_id, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                                                KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ç–∏–ø"))
        elif back_step == "—Å—Ä–æ–∫–∏":
            user_data_local["current_step"] = "deadline"
            await self.send_or_edit_message(platform, user_id, message_id, "üìÖ **–°—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:",
                                            KeyboardManager.get_deadline_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç"))
        elif back_step == "–¥—Ä—É–≥–æ–µ":
            await self.send_or_edit_message(platform, user_id, message_id, WELCOME_MESSAGE,
                                            KeyboardManager.get_initial_keyboard(platform))

    async def handle_text_message(self, platform: Platform, user_id: int, text: str):
        user_data_local = self.get_user_data(user_id)

        normalized_text = text.lower().strip()
        start_commands = ["/start", "start", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç", "go", "–º–µ–Ω—é"]

        if normalized_text in start_commands:
            await self.handle_start(platform, user_id)
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if user_data_local.get("waiting_for") == "exact_size":
            user_data_local["exact_size"] = text
            user_data_local["waiting_for"] = None
            
            category = user_data_local.get("category", "")
            if category == "–∫—É—Ö–Ω—è":
                user_data_local["current_step"] = "material"
                await self.send_material_options(platform, user_id)
            elif category in ["—à–∫–∞—Ñ", "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞—è", "–≤–∞–Ω–Ω–∞—è", "–¥—Ä—É–≥–æ–µ"]:
                user_data_local["current_step"] = "budget"
                await self.send_or_edit_message(
                    platform, user_id, None, "üí∞ **–ë—é–¥–∂–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:",
                    KeyboardManager.get_budget_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")
                )
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–º—è
        if user_data_local.get("waiting_for") == "name":
            user_data_local["name"] = text
            user_data_local["waiting_for"] = None
            await self.request_phone(platform, user_id)
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if user_data_local.get("waiting_for") == "phone":
            if len(text) >= 10 and all(char.isdigit() or char in ["+", "(", ")", "-", " "] for char in text):
                user_data_local["phone"] = text
                user_data_local["waiting_for"] = None
                await self.send_final_summary(platform, user_id)
            else:
                await self.send_message(
                    platform, user_id,
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:",
                )
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–µ–±–µ–ª–∏
        if user_data_local.get("waiting_for") == "other_furniture_description":
            user_data_local["other_furniture_description"] = text
            user_data_local["waiting_for"] = None
            user_data_local["current_step"] = "size"
            await self.send_or_edit_message(platform, user_id, None, "üìè **–†–∞–∑–º–µ—Ä—ã**\n\n–ö–∞–∫–∏–µ —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä—ã?",
                                            KeyboardManager.get_size_keyboard(platform, back_callback="–Ω–∞–∑–∞–¥_–¥—Ä—É–≥–æ–µ"))
            return

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥
        await self.send_message(
            platform, user_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.",
            KeyboardManager.get_initial_keyboard(platform)
        )

    async def send_final_summary(self, platform: Platform, user_id: int):
        user_data_local = self.get_user_data(user_id)

        summary = "‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"

        category = user_data_local.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        if category == "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π":
            summary += "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        else:
            summary += f"**–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {category.capitalize()}:**\n"

        if category == "–∫—É—Ö–Ω—è":
            summary += f"‚Ä¢ –¢–∏–ø –∫—É—Ö–Ω–∏: {user_data_local.get('kitchen_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {user_data_local.get('material', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –§—É—Ä–Ω–∏—Ç—É—Ä–∞: {user_data_local.get('hardware', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == "—à–∫–∞—Ñ":
            summary += f"‚Ä¢ –¢–∏–ø —à–∫–∞—Ñ–∞: {user_data_local.get('cabinet_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è":
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == "–ø—Ä–∏—Ö–æ–∂–∞—è":
            summary += f"‚Ä¢ –¢–∏–ø –ø—Ä–∏—Ö–æ–∂–µ–π: {user_data_local.get('hallway_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == "–≤–∞–Ω–Ω–∞—è":
            summary += f"‚Ä¢ –¢–∏–ø –º–µ–±–µ–ª–∏ –¥–ª—è –≤–∞–Ω–Ω–æ–π: {user_data_local.get('bathroom_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        elif category == "–¥—Ä—É–≥–æ–µ":
            summary += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–±–µ–ª–∏: {user_data_local.get('other_furniture_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã: {user_data_local.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if user_data_local.get('size') == "–¢–æ—á–Ω—ã–µ" and user_data_local.get('exact_size'):
                summary += f"‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('exact_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            elif user_data_local.get('size') == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" and user_data_local.get('approximate_size'):
                summary += f"‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {user_data_local.get('approximate_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        if category != "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π":
            summary += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {user_data_local.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"‚Ä¢ –°—Ä–æ–∫–∏: {user_data_local.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        summary += f"‚Ä¢ –ò–º—è: {user_data_local.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data_local.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"‚Ä¢ –£—Å–ª—É–≥–∞: {user_data_local.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

        summary += "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        summary += "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @max_lap555\n"
        summary += "üì± WhatsApp: +79063405556\n\n"
        summary += "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

        await self.send_message(platform, user_id, summary, KeyboardManager.get_contact_final_keyboard(platform))

        send_telegram_application(user_data_local)
        self.clear_user_data(user_id)

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (TelegramAdapter, VKAdapter, main —Ñ—É–Ω–∫—Ü–∏—è)
# [TelegramAdapter –∏ VKAdapter –∫–ª–∞—Å—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ]
# [main —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Telegram
class TelegramAdapter:
    def __init__(self, token: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.bot = Bot(token=token)
        self.application = ApplicationBuilder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id if update.effective_user else update.effective_chat.id
        await self.bot_core.handle_start(Platform.TELEGRAM, user_id)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if query:
            await query.answer()
            user_id = update.effective_user.id if update.effective_user else update.effective_chat.id
            await self.bot_core.handle_callback(Platform.TELEGRAM, user_id, query.data, query.message.message_id)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id if update.effective_user else update.effective_chat.id
        text = update.message.text if update.message else ""
        await self.bot_core.handle_text_message(Platform.TELEGRAM, user_id, text)

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id if update.effective_user else update.effective_chat.id
        user_data_local = self.bot_core.get_user_data(user_id)
        if user_data_local.get("waiting_for") == "phone":
            contact = update.message.contact
            if contact:
                phone_number = contact.phone_number
                user_data_local["phone"] = phone_number
                user_data_local["waiting_for"] = None
                await self.bot_core.send_final_summary(Platform.TELEGRAM, user_id)

    async def send_photo_album(self, user_id: int, photo_urls: list, text: str, keyboard=None):
        try:
            if not photo_urls:
                await self.send_message(user_id, text, keyboard)
                return

            if len(photo_urls) == 1:
                await self.bot.send_photo(chat_id=user_id, photo=photo_urls[0], caption=text)
            else:
                media_group = []
                for i, photo_url in enumerate(photo_urls[:10]):
                    if i == 0:
                        media_group.append(InputMediaPhoto(media=photo_url, caption=text))
                    else:
                        media_group.append(InputMediaPhoto(media=photo_url))
                await self.bot.send_media_group(chat_id=user_id, media=media_group)

            if keyboard:
                await self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", keyboard)

        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ(–∞–ª—å–±–æ–º–∞) –≤ Telegram: {e}")
            await self.send_message(user_id, text, keyboard)
        except Exception as e:
            logger.error(f"Unexpected error in send_photo_album: {e}")
            await self.send_message(user_id, text, keyboard)

    async def send_message(self, user_id: int, text: str, keyboard=None):
        try:
            await self.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
        except TelegramError as e:
            logger.error(f"Telegram send_message error: {e}. Text: {text}")
        except Exception as e:
            logger.error(f"Unexpected error in send_message: {e}. Text: {text}")

    async def edit_message(self, user_id: int, message_id: Optional[int], text: str, keyboard=None):
        if message_id is None:
            await self.send_message(user_id, text, keyboard)
            return

        try:
            await self.bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard)
        except TelegramError as e:
            logger.error(f"Telegram edit_message error: {e}. Falling back to send_message.")
            await self.send_message(user_id, text, keyboard)
        except Exception as e:
            logger.error(f"Unexpected error in edit_message: {e}")
            await self.send_message(user_id, text, keyboard)

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è VK
class VKAdapter:
    def __init__(self, token: str, group_id: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.vk_session = vk_api.VkApi(token=token)
        self.vk = self.vk_session.get_api()
        self.group_id = group_id
        self.photo_cache: Dict[str, str] = {}
        self.start_background_preload()

    def start_background_preload(self):
        try:
            all_photo_urls = list(WELCOME_PHOTOS) + list(MATERIAL_PHOTOS.values())
            if not all_photo_urls:
                logger.info("[VK] –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏")
                return

            logger.info(f"[VK] –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É {len(all_photo_urls)} —Ñ–æ—Ç–æ...")
            threading.Thread(
                target=lambda: asyncio.run(self.preload_photos(all_photo_urls)),
                daemon=True,
                name="VKPhotoPreload"
            ).start()

        except Exception as e:
            logger.error(f"[VK] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    async def preload_photos(self, photo_urls: List[str]):
        total = len(photo_urls)
        logger.info(f"[VK] –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {total} —Ñ–æ—Ç–æ...")

        for index, photo_url in enumerate(photo_urls, 1):
            try:
                attachment = await self.upload_photo(photo_url)
                if attachment:
                    logger.info(f"[VK] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {index}/{total} ‚Üí {attachment}")
                else:
                    logger.warning(f"[VK] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {index}/{total}: {photo_url}")
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"[VK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ {photo_url}: {e}")

        logger.info(f"[VK] –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.photo_cache)}/{total} —Ñ–æ—Ç–æ")

    async def upload_photo(self, photo_url: str) -> Optional[str]:
        if photo_url in self.photo_cache:
            cached_attachment = self.photo_cache[photo_url]
            logger.debug(f"[VK] –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ: {cached_attachment}")
            return cached_attachment

        try:
            logger.info(f"[VK] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–∑ URL: {photo_url}")
            response = requests.get(photo_url, timeout=30)
            response.raise_for_status()

            upload_url = self.vk.photos.getMessagesUploadServer()["upload_url"]
            files = {"photo": ("photo.jpg", response.content, "image/jpeg")}
            upload_response = requests.post(upload_url, files=files, timeout=30)
            upload_response.raise_for_status()
            upload_data = upload_response.json()

            save_response = self.vk.photos.saveMessagesPhoto(
                server=upload_data["server"],
                photo=upload_data["photo"],
                hash=upload_data["hash"]
            )

            if save_response:
                photo = save_response[0]
                attachment = f"photo{photo['owner_id']}_{photo['id']}"
                self.photo_cache[photo_url] = attachment
                logger.info(f"[VK] –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {attachment}")
                return attachment
            else:
                logger.error("[VK] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ")
                return None

        except Exception as e:
            logger.error(f"[VK] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return None

    async def send_photo_album(self, user_id: int, photo_urls: list, text: str, keyboard=None):
        try:
            attachments = []
            for photo_url in photo_urls[:10]:
                attachment = await self.upload_photo(photo_url)
                if attachment:
                    attachments.append(attachment)

            params = {
                "user_id": user_id,
                "message": text,
                "random_id": get_random_id(),
                "dont_parse_links": 1
            }

            if attachments:
                params["attachment"] = ",".join(attachments)
                logger.info(f"[VK] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ —Å {len(attachments)} —Ñ–æ—Ç–æ")

            if keyboard:
                params["keyboard"] = keyboard

            result = self.vk.messages.send(**params)
            logger.info(f"[VK] –§–æ—Ç–æ–∞–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: {result}")
            return result

        except Exception as e:
            logger.error(f"[VK] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º–∞: {e}")
            await self.send_message(user_id, text, keyboard)

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Poll...")
        try:
            longpoll = VkBotLongPoll(self.vk_session, self.group_id)
            logger.info("‚úì Long Poll –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"‚úì VK –±–æ—Ç –≥–æ—Ç–æ–≤! –í –∫—ç—à–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.photo_cache)} —Ñ–æ—Ç–æ")

            for event in longpoll.listen():
                logger.info(f"VK: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞: {event.type}")
                if event.type == VkBotEventType.MESSAGE_NEW and not event.from_chat:
                    self.handle_message(event)
                elif event.type == VkBotEventType.MESSAGE_EVENT:
                    self.handle_callback(event)
                else:
                    logger.info(f"VK: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event.type}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    def run_with_restart(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç VK –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Poll...")
                self.run()
            except Exception as e:
                logger.error(f"VK –±–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

    def handle_message(self, event):
        try:
            user_id = event.obj.message["from_id"]
            text = event.obj.message["text"]
            logger.info(f"VK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")
            threading.Thread(target=lambda: asyncio.run(self.process_message(user_id, text))).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def handle_callback(self, event):
        try:
            logger.info(f"VK: Callback —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
            user_id = event.obj.user_id
            payload = event.obj.payload
            logger.info(f"VK: Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"VK: Payload: {payload}")

            if isinstance(payload, dict):
                command = payload.get("command", "")
            elif isinstance(payload, str):
                try:
                    payload_dict = json.loads(payload)
                    command = payload_dict.get("command", "")
                except:
                    command = payload
            else:
                command = str(payload)

            logger.info(f"VK: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")

            self.vk.messages.sendMessageEventAnswer(
                event_id=event.obj.event_id,
                user_id=user_id,
                peer_id=event.obj.peer_id,
                event_data=json.dumps({"type": "show_snackbar", "text": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."}),
            )

            logger.info("VK: –û—Ç–≤–µ—Ç –Ω–∞ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            threading.Thread(target=lambda: asyncio.run(self.process_callback(user_id, command))).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def process_message(self, user_id: int, text: str):
        try:
            normalized_text = text.lower().strip()
            if normalized_text in ["/start", "start", "–Ω–∞—á–∞—Ç—å", "–º–µ–Ω—é"]:
                await self.bot_core.handle_start(Platform.VK, user_id)
            else:
                await self.bot_core.handle_text_message(Platform.VK, user_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_message: {e}")

    async def process_callback(self, user_id: int, command: str):
        try:
            logger.info(f"VK: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–æ–º–∞–Ω–¥—ã: '{command}'")
            await self.bot_core.handle_callback(Platform.VK, user_id, command)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_callback: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def send_message(self, user_id: int, text: str, keyboard=None):
        try:
            logger.info(f"VK: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            logger.info(f"VK: –¢–µ–∫—Å—Ç: {text}")
            params = {"user_id": user_id, "message": text, "random_id": get_random_id(), "dont_parse_links": 1}

            if keyboard:
                logger.info("VK: –î–æ–±–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
                params["keyboard"] = keyboard

                try:
                    if isinstance(keyboard, str):
                        keyboard_obj = json.loads(keyboard)
                    else:
                        keyboard_obj = keyboard
                    logger.info(f"VK: –ö–Ω–æ–ø–∫–∏: {[btn['action']['label'] for row in keyboard_obj['buttons'] for btn in row]}")
                except Exception as e:
                    logger.error(f"VK: –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

            result = self.vk.messages.send(**params)
            logger.info(f"VK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {result}")
            return result

        except Exception as e:
            logger.error(f"VK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            import traceback
            logger.error(f"VK: –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

    async def edit_message(self, user_id: int, message_id: int, text: str, keyboard=None):
        await self.send_message(user_id, text, keyboard)

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    bot_core = FurnitureBotCore()

    telegram_adapter = TelegramAdapter(TELEGRAM_TOKEN, bot_core)
    vk_adapter = VKAdapter(VK_TOKEN, VK_GROUP_ID, bot_core)

    bot_core.register_adapter(Platform.TELEGRAM, telegram_adapter)
    bot_core.register_adapter(Platform.VK, vk_adapter)

    def run_vk():
        """–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Poll...")
                vk_adapter.run()
            except Exception as e:
                logger.error(f"VK –±–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

    def run_telegram():
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
                telegram_adapter.run()
            except Exception as e:
                logger.error(f"Telegram –±–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    vk_thread = threading.Thread(target=run_vk, daemon=True)
    telegram_thread = threading.Thread(target=run_telegram, daemon=True)
    
    vk_thread.start()
    telegram_thread.start()

    logger.info("‚úÖ –û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!")
    logger.info("üì± VK –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    logger.info("üì± Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    logger.info("üîÑ –ë–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—è—Ç—Å—è –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö")

    # –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç)
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤...")

if __name__ == "__main__":
    main()
