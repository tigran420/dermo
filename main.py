
import asyncio
import json
import logging
import threading
import time
from enum import Enum
from typing import Dict, Any, List

import requests
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_api.upload import VkUpload

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# --------------------------- CONFIG ---------------------------
TELEGRAM_TOKEN = "8295931339:AAEP07XBDZ7FBIGSZg7SOZ8g7Sc_hsml8h0"
TELEGRAM_CHAT_ID = "-1003166604153"  # admin/group chat where leads are sent
VK_TOKEN = "vk1.a.Do3IzROgiVPPGSjBVw3nFEg2eIAsy7673mBTpwakOxj_qNTtCxEXx8Pa9NS_q7FbDZqVlfecQgofYCYotRguILuXWAYu7DL2gkQocsu7zcRvk3M9R_0jCzzjErAJRLcy_Zx4jEZR87zCFUJvKIvkU_hLmJbfozuPkamZbBaElI1yZ8U3RpRNqMdjkdwm5SdFFS1HqCp7xxLu0EnF4JyVqA"
VK_GROUP_ID = "233089872"

# Photos (raw GitHub URLs) - provided by user
WELCOME_PHOTOS: List[str] = [
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(2).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(3).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(4).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(5).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(6).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58%20(7).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-58.jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-05_16-08-59.jpg",
]

MATERIALS_PHOTOS: List[str] = [
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-06_15-58-59%20(2).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-06_15-58-59%20(3).jpg",
    "https://raw.githubusercontent.com/tigran420/dermo/5be79081c7a6fa620a49671bf22703d98c6d9020/photo_2025-10-06_15-58-59.jpg",
]

# Updated welcome text
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!ü§ù\n"
    "–ù–∞ —Å–≤—è–∑–∏ 2–ú –§–ê–ë–†–ò–ö–ê –ú–ï–ë–ï–õ–ò!\n"
    "–ú—ã –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–ø—É—Å–Ω—É—é –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å —Å 1993 –≥–æ–¥–∞, –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º:\n"
    "–∫—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã-–∫—É–ø–µ, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ, –º–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
    "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤, –¥–µ–ª–∞–µ–º –≤—Å–µ —Å–∞–º–∏ –æ—Ç –∑–∞–º–µ—Ä–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n"
    "–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–æ–ª–µ–µ 1000 —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫, –æ—Ç –õ–î–°–ü –¥–æ –≠–º–∞–ª–∏ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã (Blum, Hettich, Boyard –∏ –¥—Ä.).\n"
    "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É.\n"
    "–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ù–ï –ë–ï–†–Å–ú –ø–ª–∞—Ç—ã –∑–∞ –≤—ã—Ä–µ–∑—ã: –ø–æ–¥ –≤–∞—Ä–æ—á–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –ø–æ–¥ —Å–∞–Ω —É–∑–ª—ã, –ø–æ–¥ –ø–ª–∏–Ω—Ç—É—Å–∞, –ø–æ–¥ –º–æ–π–∫—É –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥–∏–µ –º–µ–±–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
    "–ì–∞—Ä–∞–Ω—Ç–∏—è 24 –º–µ—Å—è—Ü–∞ –Ω–∞ –≤—Å—é –ø—Ä–æ–¥—É–∫—Ü–∏—é!\n"
    "–¶–µ–Ω—ã –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤—è—Ç!\n"
    "–†–∞—Å—Å—Ä–æ—á–∫–∞!!!"
)

# storage for users
user_data: Dict[int, Dict[str, Any]] = {}

# Logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class Platform(Enum):
    TELEGRAM = "telegram"
    VK = "vk"


# ----------------------- Keyboards -----------------------
class KeyboardManager:
    @staticmethod
    def get_initial_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–ö—É—Ö–Ω—è", callback_data="–∫—É—Ö–Ω—è")],
                [InlineKeyboardButton("–®–∫–∞—Ñ", callback_data="—à–∫–∞—Ñ")],
                [InlineKeyboardButton("–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", callback_data="–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è")],
                [InlineKeyboardButton("–ü—Ä–∏—Ö–æ–∂–∞—è", callback_data="–ø—Ä–∏—Ö–æ–∂–∞—è")],
                [InlineKeyboardButton("–ú–µ–±–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π", callback_data="–≤–∞–Ω–Ω–∞—è")],
                [InlineKeyboardButton("–î—Ä—É–≥–∞—è –º–µ–±–µ–ª—å", callback_data="–¥—Ä—É–≥–æ–µ")],
                [InlineKeyboardButton("–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π", callback_data="—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π")]
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            # VK keyboard (keeps labels shorter to fit UI)
            keyboard = {
                "inline": True,
                "buttons": [
                    [
                        {"action": {"type": "callback", "label": "üç≥ –ö—É—Ö–Ω—è", "payload": json.dumps({"command": "–∫—É—Ö–Ω—è"})}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üö™ –®–∫–∞—Ñ", "payload": json.dumps({"command": "—à–∫–∞—Ñ"})}, "color": "primary"}
                    ],
                    [
                        {"action": {"type": "callback", "label": "üëî –ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "payload": json.dumps({"command": "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è"})}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üõã –ü—Ä–∏—Ö–æ–∂–∞—è", "payload": json.dumps({"command": "–ø—Ä–∏—Ö–æ–∂–∞—è"})}, "color": "primary"}
                    ],
                    [
                        {"action": {"type": "callback", "label": "üõÅ –í–∞–Ω–Ω–∞—è", "payload": json.dumps({"command": "–≤–∞–Ω–Ω–∞—è"})}, "color": "primary"},
                        {"action": {"type": "callback", "label": "üõã –î—Ä—É–≥–æ–µ", "payload": json.dumps({"command": "–¥—Ä—É–≥–æ–µ"})}, "color": "secondary"}
                    ],
                    [
                        {"action": {"type": "callback", "label": "üìû –°–≤—è–∑—å", "payload": json.dumps({"command": "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π"})}, "color": "positive"}
                    ]
                ]
            }
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_phone_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)], [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        else:
            keyboard = {"inline": True, "buttons": [[{"action": {"type": "callback", "label": "üìû –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "payload": json.dumps({"command": "–≤–≤–µ—Å—Ç–∏_—Ç–µ–ª–µ—Ñ–æ–Ω"})}, "color": "positive"}]]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_kitchen_type_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–£–≥–ª–æ–≤–∞—è", callback_data="–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è")],
                [InlineKeyboardButton("–ü—Ä—è–º–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è")],
                [InlineKeyboardButton("–ü-–æ–±—Ä–∞–∑–Ω–∞—è", callback_data="–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è")],
                [InlineKeyboardButton("–° –æ—Å—Ç—Ä–æ–≤–æ–º", callback_data="–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            keyboard = {"inline": True, "buttons": [[[{"action": {"type": "callback", "label": "üìê –£–≥–ª–æ–≤–∞—è", "payload": json.dumps({"command": "–∫—É—Ö–Ω—è_—É–≥–ª–æ–≤–∞—è"})}, "color": "primary"}]], [[{"action": {"type": "callback", "label": "üìè –ü—Ä—è–º–∞—è", "payload": json.dumps({"command": "–∫—É—Ö–Ω—è_–ø—Ä—è–º–∞—è"})}, "color": "primary"}]], [[{"action": {"type": "callback", "label": "üîÑ –ü-–æ–±—Ä–∞–∑–Ω–∞—è", "payload": json.dumps({"command": "–∫—É—Ö–Ω—è_–ø_–æ–±—Ä–∞–∑–Ω–∞—è"})}, "color": "primary"}]], [[{"action": {"type": "callback", "label": "üèù –° –æ—Å—Ç—Ä–æ–≤–æ–º", "payload": json.dumps({"command": "–∫—É—Ö–Ω—è_–æ—Å—Ç—Ä–æ–≤"})}, "color": "primary"}]], [[{"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": json.dumps({"command": "–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"})}, "color": "negative"}]]]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_material_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–õ–î–°–ü", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø")],
                [InlineKeyboardButton("–ê–ì–¢", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç")],
                [InlineKeyboardButton("–≠–º–∞–ª—å", callback_data="–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            keyboard = {"inline": True, "buttons": [
                [{"action": {"type": "callback", "label": "üå≥ –õ–î–°–ü", "payload": json.dumps({"command": "–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "‚ú® –ê–ì–¢", "payload": json.dumps({"command": "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üé® –≠–º–∞–ª—å", "payload": json.dumps({"command": "–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": json.dumps({"command": "–Ω–∞–∑–∞–¥_—Ä–∞–∑–º–µ—Ä"})}, "color": "negative"}],
            ]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_hardware_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º ‚Äî –¥–æ 150‚ÄØ—Ç—ã—Å. —Ä—É–±.", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 150‚Äì300‚ÄØ—Ç—ã—Å. —Ä—É–±.", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º ‚Äî –æ—Ç 300‚ÄØ—Ç—ã—Å. —Ä—É–±.", callback_data="—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª")],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            keyboard = {"inline": True, "buttons": [
                [{"action": {"type": "callback", "label": "üí∞ –≠–∫–æ–Ω–æ–º ‚Äî –¥–æ 150k", "payload": json.dumps({"command": "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—ç–∫–æ–Ω–æ–º"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 150‚Äì300k", "payload": json.dumps({"command": "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üëë –ü—Ä–µ–º–∏—É–º ‚Äî –æ—Ç 300k", "payload": json.dumps({"command": "—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞_–ø—Ä–µ–º–∏—É–º"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": json.dumps({"command": "–Ω–∞–∑–∞–¥_–º–∞—Ç–µ—Ä–∏–∞–ª"})}, "color": "negative"}],
            ]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_budget_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_–ø—Ä–µ–¥—ã–¥—É—â–∏–π"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠–∫–æ–Ω–æ–º ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –±–∞–∑–æ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ (–¥–æ 150 —Ç—ã—Å. —Ä—É–±.)", callback_data="–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º")],
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Ç 150 -300 —Ç—ã—Å. —Ä—É–±.)", callback_data="–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ (–æ—Ç 300 —Ç—ã—Å. —Ä—É–±.)", callback_data="–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            keyboard = {"inline": True, "buttons": [
                [{"action": {"type": "callback", "label": "üí∞ –≠–∫–æ–Ω–æ–º ‚Äî –¥–æ 150k", "payload": json.dumps({"command": "–±—é–¥–∂–µ—Ç_—ç–∫–æ–Ω–æ–º"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 150‚Äì300k", "payload": json.dumps({"command": "–±—é–¥–∂–µ—Ç_—Å—Ç–∞–Ω–¥–∞—Ä—Ç"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üëë –ü—Ä–µ–º–∏—É–º ‚Äî –æ—Ç 300k", "payload": json.dumps({"command": "–±—é–¥–∂–µ—Ç_–ø—Ä–µ–º–∏—É–º"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": json.dumps({"command": back_callback})}, "color": "negative"}],
            ]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_deadline_keyboard(platform: Platform, back_callback: str = "–Ω–∞–∑–∞–¥_–±—é–¥–∂–µ—Ç"):
        if platform == Platform.TELEGRAM:
            keyboard = [
                [InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="—Å—Ä–æ–∫_–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("1-2 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_1_2")],
                [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data="—Å—Ä–æ–∫_3")],
                [InlineKeyboardButton("–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", callback_data="—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
            return InlineKeyboardMarkup(keyboard)
        else:
            keyboard = {"inline": True, "buttons": [
                [{"action": {"type": "callback", "label": "üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "payload": json.dumps({"command": "—Å—Ä–æ–∫_–º–µ—Å—è—Ü"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "‚è≥ 1-2 –º–µ—Å—è—Ü–∞", "payload": json.dumps({"command": "—Å—Ä–æ–∫_1_2"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üìÖ 3 –º–µ—Å—è—Ü–∞", "payload": json.dumps({"command": "—Å—Ä–æ–∫_3"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üëÄ –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", "payload": json.dumps({"command": "—Å—Ä–æ–∫_–ø—Ä–∏—Å–º–æ—Ç—Ä"})}, "color": "primary"}],
                [{"action": {"type": "callback", "label": "üîô –ù–∞–∑–∞–¥", "payload": json.dumps({"command": back_callback})}, "color": "negative"}],
            ]}
            return json.dumps(keyboard, ensure_ascii=False)

    @staticmethod
    def get_contact_final_keyboard(platform: Platform):
        if platform == Platform.TELEGRAM:
            keyboard = [[KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]]
            return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏...")
        else:
            keyboard = {"inline": True, "buttons": [[{"action": {"type": "callback", "label": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "payload": json.dumps({"command": "–ø–æ_—Ç–µ–ª–µ—Ñ–æ–Ω—É"})}, "color": "positive"}], [{"action": {"type": "callback", "label": "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram", "payload": json.dumps({"command": "—Å–æ–æ–±—â–µ–Ω–∏–µ_—Ç–≥"})}, "color": "primary"}], [{"action": {"type": "callback", "label": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "payload": json.dumps({"command": "–Ω–∞—á–∞—Ç—å_–∑–∞–Ω–æ–≤–æ"})}, "color": "secondary"}]]}
            return json.dumps(keyboard, ensure_ascii=False)


# ----------------------- Core -----------------------
class FurnitureBotCore:
    def __init__(self):
        self.adapters = {}

    def register_adapter(self, platform: Platform, adapter):
        self.adapters[platform] = adapter

    async def send_message(self, platform: Platform, user_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].send_message(user_id, text, keyboard)

    async def edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if platform in self.adapters:
            await self.adapters[platform].edit_message(user_id, message_id, text, keyboard)

    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if user_id not in user_data:
            user_data[user_id] = {}
        return user_data[user_id]

    def clear_user_data(self, user_id: int):
        if user_id in user_data:
            del user_data[user_id]

    async def handle_start(self, platform: Platform, user_id: int):
        self.clear_user_data(user_id)
        # send welcome text + photos
        if platform == Platform.TELEGRAM:
            # send welcome text first
            await self.send_message(platform, user_id, WELCOME_MESSAGE, KeyboardManager.get_initial_keyboard(platform))
            # send album of photos
            try:
                media = [InputMediaPhoto(url) for url in WELCOME_PHOTOS]
                await self.adapters[Platform.TELEGRAM].application.bot.send_media_group(chat_id=user_id, media=media)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(WELCOME_PHOTOS)} welcome —Ñ–æ—Ç–æ –≤ Telegram")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome photos –≤ Telegram: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
                for url in WELCOME_PHOTOS:
                    try:
                        await self.adapters[Platform.TELEGRAM].application.bot.send_photo(chat_id=user_id, photo=url)
                    except Exception as e2:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {url}: {e2}")
        else:
            # VK: send text then upload photos and send as album (messages)
            await self.send_message(platform, user_id, WELCOME_MESSAGE, KeyboardManager.get_initial_keyboard(platform))
            await self.send_photos_vk(user_id, WELCOME_PHOTOS, "welcome")

    async def send_photos_vk(self, user_id: int, photo_urls: List[str], photo_type: str = "photos"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ VK"""
        try:
            vk_adapter = self.adapters[Platform.VK]
            upload = VkUpload(vk_adapter.vk_session)
            photo_attachments = []
            
            for i, url in enumerate(photo_urls):
                try:
                    logger.info(f"VK: –ó–∞–≥—Ä—É–∑–∫–∞ {photo_type} —Ñ–æ—Ç–æ {i+1}/{len(photo_urls)}: {url}")
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ VK
                    photo = upload.photo_messages(photos=response.content)[0]
                    attachment = f"photo{photo['owner_id']}_{photo['id']}"
                    photo_attachments.append(attachment)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã VK
                    time.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {photo_type} —Ñ–æ—Ç–æ {url}: {e}")
                    continue
            
            if photo_attachments:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–∞–∫—Å–∏–º—É–º 10 –≤–ª–æ–∂–µ–Ω–∏–π)
                attachments_str = ','.join(photo_attachments)
                vk_adapter.vk.messages.send(
                    user_id=user_id,
                    random_id=get_random_id(),
                    attachment=attachments_str
                )
                logger.info(f"VK: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photo_attachments)} {photo_type} —Ñ–æ—Ç–æ")
            else:
                logger.warning(f"VK: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ {photo_type} —Ñ–æ—Ç–æ")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {photo_type} —Ñ–æ—Ç–æ –≤ VK: {e}")

    async def request_name(self, platform: Platform, user_id: int, message_id: int = None):
        text = "üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        if message_id and platform == Platform.TELEGRAM:
            await self.edit_message(platform, user_id, message_id, text)
        else:
            await self.send_message(platform, user_id, text)
        self.get_user_data(user_id)["waiting_for"] = "name"

    async def handle_callback(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        user_data_local = self.get_user_data(user_id)

        if data.startswith("–Ω–∞–∑–∞–¥_"):
            await self.handle_back_button(platform, user_id, data, message_id)
            return

        if data == "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π":
            user_data_local["category"] = "—Å–≤—è–∑–∞—Ç—å—Å—è_—Å–æ_–º–Ω–æ–π"
            await self.request_name(platform, user_id, message_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        if data.startswith("–º–∞—Ç–µ—Ä–∏–∞–ª_"):
            # remember material selection
            if data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–ª–¥—Å–ø":
                user_data_local["material"] = "–õ–î–°–ü"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_–∞–≥—Ç":
                user_data_local["material"] = "–ê–ì–¢"
            elif data == "–º–∞—Ç–µ—Ä–∏–∞–ª_—ç–º–∞–ª—å":
                user_data_local["material"] = "–≠–º–∞–ª—å"

            # send explanation + photos
            text = "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"
            await self.send_message(platform, user_id, text)

            if platform == Platform.TELEGRAM:
                try:
                    media = [InputMediaPhoto(url) for url in MATERIALS_PHOTOS]
                    await self.adapters[Platform.TELEGRAM].application.bot.send_media_group(chat_id=user_id, media=media)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(MATERIALS_PHOTOS)} —Ñ–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Telegram")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Telegram: {e}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É
                    for url in MATERIALS_PHOTOS:
                        try:
                            await self.adapters[Platform.TELEGRAM].application.bot.send_photo(chat_id=user_id, photo=url)
                        except Exception as e2:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {url}: {e2}")
            else:
                await self.send_photos_vk(user_id, MATERIALS_PHOTOS, "materials")
            
            # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Ç–æ–∫
            await self.send_message(platform, user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É:", KeyboardManager.get_hardware_keyboard(platform))
            return

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if data in ["–∫—É—Ö–Ω—è", "—à–∫–∞—Ñ", "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è", "–ø—Ä–∏—Ö–æ–∂–∞—è", "–≤–∞–Ω–Ω–∞—è", "–¥—Ä—É–≥–æ–µ"]:
            user_data_local["category"] = data
            if data == "–∫—É—Ö–Ω—è":
                await self.send_message(platform, user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:", KeyboardManager.get_kitchen_type_keyboard(platform))
            else:
                await self.send_message(platform, user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", KeyboardManager.get_budget_keyboard(platform))
        
        elif data.startswith("–±—é–¥–∂–µ—Ç_"):
            user_data_local["budget"] = data.replace("–±—é–¥–∂–µ—Ç_", "")
            await self.send_message(platform, user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏:", KeyboardManager.get_deadline_keyboard(platform))
        
        elif data.startswith("—Å—Ä–æ–∫_"):
            user_data_local["deadline"] = data.replace("—Å—Ä–æ–∫_", "")
            await self.request_name(platform, user_id, message_id)

    async def send_or_edit_message(self, platform: Platform, user_id: int, message_id: int, text: str, keyboard=None):
        if message_id and platform == Platform.TELEGRAM:
            await self.edit_message(platform, user_id, message_id, text, keyboard)
        else:
            await self.send_message(platform, user_id, text, keyboard)

    async def handle_back_button(self, platform: Platform, user_id: int, data: str, message_id: int = None):
        if data == "–Ω–∞–∑–∞–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            await self.send_or_edit_message(platform, user_id, message_id, WELCOME_MESSAGE, KeyboardManager.get_initial_keyboard(platform))

    async def handle_text_message(self, platform: Platform, user_id: int, text: str):
        user_data_local = self.get_user_data(user_id)
        normalized_text = text.lower().strip()
        if normalized_text in ["/start", "start", "–Ω–∞—á–∞—Ç—å", "–º–µ–Ω—é"]:
            await self.handle_start(platform, user_id)
            return

        if user_data_local.get("waiting_for") == "name":
            user_data_local["name"] = text
            user_data_local["waiting_for"] = "phone"
            await self.send_message(platform, user_id, f"–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ: {text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:", KeyboardManager.get_phone_keyboard(platform))
            return

        if user_data_local.get("waiting_for") == "phone":
            cleaned = ''.join(c for c in text if c.isdigit() or c == '+')
            if (cleaned.startswith('+7') and len(cleaned) == 12) or (cleaned.startswith('8') and len(cleaned) == 11) or (len(cleaned) == 10):
                user_data_local['phone'] = cleaned
                user_data_local['waiting_for'] = None
                await self.send_final_summary(platform, user_id)
            else:
                await self.send_message(platform, user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # default reply
        await self.send_message(platform, user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", KeyboardManager.get_initial_keyboard(platform))

    async def send_final_summary(self, platform: Platform, user_id: int):
        user_data_local = self.get_user_data(user_id)
        summary = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        category = user_data_local.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        summary += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        if 'kitchen_type' in user_data_local:
            summary += f"–¢–∏–ø –∫—É—Ö–Ω–∏: {user_data_local.get('kitchen_type')}\n"
        summary += f"–ë—é–¥–∂–µ—Ç: {user_data_local.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"–°—Ä–æ–∫–∏: {user_data_local.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"–ò–º—è: {user_data_local.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data_local.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        await self.send_message(platform, user_id, summary, KeyboardManager.get_contact_final_keyboard(platform))

        # send to admin group
        try:
            # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)
            await self.send_telegram_application(user_data_local)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")

        self.clear_user_data(user_id)

    async def send_telegram_application(self, user_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç Telegram"""
        try:
            summary = "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
            summary += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if 'kitchen_type' in user_data:
                summary += f"–¢–∏–ø –∫—É—Ö–Ω–∏: {user_data.get('kitchen_type')}\n"
            summary += f"–ë—é–¥–∂–µ—Ç: {user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"–°—Ä–æ–∫–∏: {user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"–ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            
            await self.adapters[Platform.TELEGRAM].application.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=summary
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")


# ----------------------- Telegram Adapter -----------------------
class TelegramAdapter:
    def __init__(self, token: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.application = ApplicationBuilder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.bot_core.handle_start(Platform.TELEGRAM, update.effective_user.id)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await self.bot_core.handle_callback(Platform.TELEGRAM, update.effective_user.id, query.data, query.message.message_id)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.bot_core.handle_text_message(Platform.TELEGRAM, update.effective_user.id, update.message.text)

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_data_local = self.bot_core.get_user_data(user_id)
        if user_data_local.get('waiting_for') == 'phone':
            phone_number = update.message.contact.phone_number
            user_data_local['phone'] = phone_number
            user_data_local['waiting_for'] = None
            await self.bot_core.send_final_summary(Platform.TELEGRAM, user_id)

    async def send_message(self, user_id: int, text: str, keyboard=None):
        try:
            await self.application.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    async def edit_message(self, user_id: int, message_id: int, text: str, keyboard=None):
        try:
            await self.application.bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()


# ----------------------- VK Adapter (with auto-reconnect) -----------------------
class VKAdapter:
    def __init__(self, token: str, group_id: str, bot_core: FurnitureBotCore):
        self.bot_core = bot_core
        self.token = token
        self.group_id = group_id
        self.vk_session = None
        self.vk = None

    def run(self):
        logger.info("–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Poll (—Å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º)...")
        while True:
            try:
                self.vk_session = vk_api.VkApi(token=self.token)
                self.vk = self.vk_session.get_api()
                longpoll = VkBotLongPoll(self.vk_session, self.group_id)
                logger.info("‚úì Long Poll –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

                for event in longpoll.listen():
                    try:
                        if event.type == VkBotEventType.MESSAGE_NEW:
                            self.handle_message(event)
                        elif event.type == VkBotEventType.MESSAGE_EVENT:
                            self.handle_callback(event)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è VK: {e}")
            except Exception as e:
                logger.error(f"VK loop error: {e}")
                logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

    def handle_message(self, event):
        try:
            user_id = event.obj.message['from_id']
            text = event.obj.message.get('text', '')
            logger.info(f"VK: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")
            asyncio.run(self.process_message(user_id, text))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è VK: {e}")

    def handle_callback(self, event):
        try:
            user_id = event.obj.user_id
            payload = event.obj.payload
            if isinstance(payload, str):
                try:
                    payload_dict = json.loads(payload)
                    command = payload_dict.get('command', '')
                except Exception:
                    command = payload
            else:
                command = str(payload)

            # send UI response
            try:
                self.vk.messages.sendMessageEventAnswer(
                    event_id=event.obj.event_id,
                    user_id=user_id,
                    peer_id=event.obj.peer_id,
                    event_data=json.dumps({"type": "show_snackbar", "text": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."})
                )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å event answer: {e}")

            asyncio.run(self.process_callback(user_id, command))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback VK: {e}")

    async def process_message(self, user_id: int, text: str):
        try:
            await self.bot_core.handle_text_message(Platform.VK, user_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_message VK: {e}")

    async def process_callback(self, user_id: int, command: str):
        try:
            await self.bot_core.handle_callback(Platform.VK, user_id, command)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ process_callback VK: {e}")

    async def send_message(self, user_id: int, text: str, keyboard=None):
        try:
            params = {
                'user_id': user_id,
                'message': text,
                'random_id': get_random_id(),
            }
            if keyboard:
                params['keyboard'] = keyboard

            result = self.vk.messages.send(**params)
            return result
        except Exception as e:
            logger.error(f"VK: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def edit_message(self, user_id: int, message_id: int, text: str, keyboard=None):
        # VK longpoll can't edit messages: send new
        await self.send_message(user_id, text, keyboard)


# ----------------------- Main -----------------------

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    bot_core = FurnitureBotCore()

    telegram_adapter = TelegramAdapter(TELEGRAM_TOKEN, bot_core)
    vk_adapter = VKAdapter(VK_TOKEN, VK_GROUP_ID, bot_core)

    bot_core.register_adapter(Platform.TELEGRAM, telegram_adapter)
    bot_core.register_adapter(Platform.VK, vk_adapter)

    # –ó–∞–ø—É—Å–∫–∞–µ–º VK –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
    vk_thread = threading.Thread(target=vk_adapter.run, daemon=True)
    vk_thread.start()

    logger.info("VK: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info("Telegram: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

    # –ó–∞–ø—É—Å–∫ Telegram –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (async library)
    telegram_adapter.run()


if __name__ == '__main__':
    main()
